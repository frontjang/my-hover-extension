{"version":3,"file":"index.browser.js","sourceRoot":"","sources":["../src/index.browser.ts"],"names":[],"mappings":";;;AAAA,yCAAsC;AACtC,oDAAuD;AAEvD,sCAAwD;AAGxD,+CAAkD;AAAzC,gHAAA,gBAAgB,OAAA;AAEzB,MAAa,eAAgB,SAAQ,mBAAQ;IAG3C,YAAY,GAAG,IAA4C;QACzD,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;QACf,MAAM,SAAS,GAAG,OAAO,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAE,UAAsC,CAAC,CAAC,CAAC,EAAE,CAAC;QAChG,MAAM,aAAa,GAAG,SAAS,CAAC,MAAsD,CAAC;QACvF,MAAM,MAAM,GAAG,aAAa,EAAE,QAAQ,EAAE,MAAM,IAAI,EAAE,CAAC;QACrD,MAAM,WAAW,GACf,IAAA,eAAS,EAAC,qBAAqB,CAAC,IAAI,qCAAqC,CAAC;QAE5E,MAAM,YAAY,GAAG,mBAAQ,CAAC,YAAY,CAAC;QAE3C,IAAI,CAAC,WAAW,GAAG,IAAI,+BAAiB,CAAC;YACvC,QAAQ,EAAE,IAAA,mBAAa,EAAC,kBAAkB,CAAC;YAC3C,QAAQ,EAAE,IAAA,mBAAa,EAAC,kBAAkB,CAAC;YAC3C,SAAS,EAAE,IAAA,eAAS,EAAC,kBAAkB,CAAC;YACxC,WAAW;YACX,qBAAqB,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,CAAC,CAAC,CAAC,SAAS;YACxD,aAAa,EAAE,gBAAgB;YAC/B,aAAa,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE;YACjD,eAAe,EAAE,OAAO;SACzB,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,2BAA2B;QAC/B,MAAM,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE,CAAC;QAC7C,IAAI,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,EAAE,CAAC;YACvC,MAAM,MAAM,GAAG,mBAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,mBAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YAC3E,IAAI,MAAM,EAAE,CAAC;gBACX,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;gBAClE,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YACtC,CAAC;QACH,CAAC;IACH,CAAC;IAED,KAAK,CAAC,6BAA6B,CAAC,MAAM,GAAG,CAAC,mBAAQ,CAAC,YAAY,CAAC;QAClE,MAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAmB,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QAC1E,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAChC,MAAM,IAAI,KAAK,CAAC,iEAAiE,CAAC,CAAC;QACrF,CAAC;QACD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;QAC1E,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;IACtC,CAAC;IAED,uBAAuB;QACrB,OAAO,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC;IAC5C,CAAC;IAED,yBAAyB;QACvB,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,EAAE,QAAQ,IAAI,SAAS,CAAC;IAC9D,CAAC;IAED,KAAK,CAAC,cAAc;QAClB,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;QAChC,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;IAC7B,CAAC;CACF;AAzDD,0CAyDC;AAED,kBAAe,eAAe,CAAC","sourcesContent":["import { CustomAI } from \"./CustomAI\";\nimport { BrowserAuthClient } from \"./auth/browserAuth\";\nimport { _shimInitialized } from \"./browser-shim\";\nimport { getEnvVar, requireEnvVar } from \"./config/env\";\n\nexport { type CustomAIModel } from \"./model\";\nexport { _shimInitialized } from \"./browser-shim\";\n\nexport class CustomAIBrowser extends CustomAI {\n  private readonly browserAuth: BrowserAuthClient;\n\n  constructor(...args: ConstructorParameters<typeof CustomAI>) {\n    super(...args);\n    const globalRef = typeof globalThis === \"object\" ? (globalThis as Record<string, unknown>) : {};\n    const browserWindow = globalRef.window as { location: { origin: string } } | undefined;\n    const origin = browserWindow?.location?.origin ?? \"\";\n    const redirectUri =\n      getEnvVar(\"CUSTOM_REDIRECT_URI\") ?? \"http://localhost:3000/auth/callback\";\n\n    const defaultScope = CustomAI.defaultScope;\n\n    this.browserAuth = new BrowserAuthClient({\n      clientId: requireEnvVar(\"CUSTOM_CLIENT_ID\"),\n      tenantId: requireEnvVar(\"CUSTOM_TENANT_ID\"),\n      authority: getEnvVar(\"CUSTOM_AUTHORITY\"),\n      redirectUri,\n      postLogoutRedirectUri: origin ? `${origin}/` : undefined,\n      cacheLocation: \"sessionStorage\",\n      defaultScopes: defaultScope ? [defaultScope] : [],\n      interactionType: \"popup\",\n    });\n  }\n\n  async customaiHydrateFromRedirect(): Promise<void> {\n    await this.browserAuth.hydrateFromRedirect();\n    if (this.browserAuth.isAuthenticated()) {\n      const scopes = CustomAI.defaultScope ? [CustomAI.defaultScope] : undefined;\n      if (scopes) {\n        const accessToken = await this.browserAuth.getAccessToken(scopes);\n        this.setAzureAuthToken(accessToken);\n      }\n    }\n  }\n\n  async customaiAuthenticateInBrowser(scopes = [CustomAI.defaultScope]): Promise<void> {\n    const filteredScopes = scopes.filter((scope): scope is string => !!scope);\n    if (filteredScopes.length === 0) {\n      throw new Error(\"At least one scope must be provided for browser authentication.\");\n    }\n    const accessToken = await this.browserAuth.getAccessToken(filteredScopes);\n    this.setAzureAuthToken(accessToken);\n  }\n\n  customaiIsAuthenticated(): boolean {\n    return this.browserAuth.isAuthenticated();\n  }\n\n  customaiAuthenticatedUser(): string {\n    return this.browserAuth.getAccount()?.username ?? \"Unknown\";\n  }\n\n  async customaiLogout(): Promise<void> {\n    await this.browserAuth.logout();\n    this.setAzureAuthToken(\"\");\n  }\n}\n\nexport default CustomAIBrowser;\n"]}