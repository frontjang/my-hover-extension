{"version":3,"file":"fileLineReference.js","sourceRoot":"","sources":["../../../src/prompts/processors/fileLineReference.ts"],"names":[],"mappings":";;;AAUA,wDAuBC;AAzBY,QAAA,iBAAiB,GAAG,6CAA6C,CAAC;AAE/E,SAAgB,sBAAsB,CAAC,SAAiB;IACtD,MAAM,OAAO,GAAG,SAAS,CAAC,IAAI,EAAE,CAAC;IAEjC,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,MAAM,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IAC/C,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAEpC,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACrB,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;IAC7B,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjC,MAAM,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;IAEvD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,UAAU,IAAI,CAAC,EAAE,CAAC;QACpD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;AACxC,CAAC;AAED,MAAa,0BAA0B;IAGrC,YAA6B,QAA6B;QAA7B,aAAQ,GAAR,QAAQ,CAAqB;QAFjD,OAAE,GAAG,mBAAmB,CAAC;IAE2B,CAAC;IAE9D,KAAK,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAuB;QAC7C,MAAM,KAAK,GAAG,yBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE/C,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,OAAO,SAAS,CAAC;QACnB,CAAC;QAED,MAAM,MAAM,GAAG,sBAAsB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAEhD,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,CAAC,GAAG,CAAC,uEAAuE,CAAC,CAAC;YACrF,OAAO,SAAS,CAAC;QACnB,CAAC;QAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;QAE1E,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,OAAO,CAAC,GAAG,CACT,6CAA6C,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,IAAI,yBAAyB,CACrG,CAAC;YACF,OAAO,SAAS,CAAC;QACnB,CAAC;QAED,MAAM,MAAM,GAAG,2BAA2B,OAAO,CAAC,WAAW,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;QAC/E,MAAM,MAAM,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEpE,OAAO,GAAG,MAAM,KAAK,MAAM,EAAE,CAAC;IAChC,CAAC;CACF;AAjCD,gEAiCC","sourcesContent":["import { FileContextResolver } from '../fileContextResolver';\nimport { LineProcessor, LineProcessorParams } from '../types';\n\nexport interface ParsedFileLineReference {\n  readonly filePath: string;\n  readonly line: number;\n}\n\nexport const FILE_LINE_PATTERN = /file_line\\s*=\\s*\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"/i;\n\nexport function parseFileLineReference(reference: string): ParsedFileLineReference | undefined {\n  const trimmed = reference.trim();\n\n  if (!trimmed) {\n    return undefined;\n  }\n\n  const normalized = trimmed.replace(/\\\\/g, '/');\n  const parts = normalized.split(':');\n\n  if (parts.length < 2) {\n    return undefined;\n  }\n\n  const linePart = parts.pop();\n  const filePath = parts.join(':');\n  const parsedLine = Number.parseInt(linePart ?? '', 10);\n\n  if (!Number.isFinite(parsedLine) || parsedLine <= 0) {\n    return undefined;\n  }\n\n  return { filePath, line: parsedLine };\n}\n\nexport class FileLineReferenceProcessor implements LineProcessor {\n  readonly id = 'fileLineReference';\n\n  constructor(private readonly resolver: FileContextResolver) {}\n\n  async process({ lineText }: LineProcessorParams): Promise<string | undefined> {\n    const match = FILE_LINE_PATTERN.exec(lineText);\n\n    if (!match) {\n      return undefined;\n    }\n\n    const parsed = parseFileLineReference(match[1]);\n\n    if (!parsed) {\n      console.log('[MyHoverExtension] file_line reference found but could not be parsed.');\n      return undefined;\n    }\n\n    const context = await this.resolver.resolve(parsed.filePath, parsed.line);\n\n    if (!context) {\n      console.log(\n        `[MyHoverExtension] file_line reference to ${parsed.filePath}:${parsed.line} could not be resolved.`\n      );\n      return undefined;\n    }\n\n    const header = `Supporting context from ${context.displayPath}:${parsed.line}`;\n    const fenced = ['```', context.snippet.trimEnd(), '```'].join('\\n');\n\n    return `${header}\\n${fenced}`;\n  }\n}\n\n"]}