{"version":3,"file":"msal-browser.js","sourceRoot":"","sources":["../../src/vendor/msal-browser.ts"],"names":[],"mappings":"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","sourcesContent":["import { Buffer } from \"node:buffer\";\n\nexport type CacheLocation = \"localStorage\" | \"sessionStorage\" | \"memoryStorage\";\n\nexport interface AccountInfo {\n  username?: string;\n  [key: string]: unknown;\n}\n\nexport interface AuthenticationResult {\n  accessToken: string;\n  account?: AccountInfo | null;\n  expiresOn?: Date;\n  [key: string]: unknown;\n}\n\nexport interface SilentRequest {\n  account?: AccountInfo | null;\n  scopes?: string[];\n}\n\nexport interface PopupRequest {\n  scopes?: string[];\n  loginHint?: string;\n}\n\nexport interface RedirectRequest {\n  scopes?: string[];\n  loginHint?: string;\n}\n\nexport interface Configuration {\n  auth: {\n    clientId: string;\n    authority?: string;\n    redirectUri: string;\n    postLogoutRedirectUri?: string;\n    navigateToLoginRequestUrl?: boolean;\n  };\n  cache?: {\n    cacheLocation?: CacheLocation;\n    storeAuthStateInCookie?: boolean;\n  };\n  system?: {\n    allowRedirectInIframe?: boolean;\n    iframeHashTimeout?: number;\n  };\n}\n\ntype StorageLike = {\n  getItem(key: string): string | null;\n  setItem(key: string, value: string): void;\n  removeItem(key: string): void;\n};\n\nconst memoryStorage = new Map<string, string>();\n\nconst getStorage = (location: CacheLocation | undefined): StorageLike | Map<string, string> => {\n  const globalRef = typeof globalThis === \"object\" ? (globalThis as Record<string, unknown>) : {};\n  const browserWindow = globalRef.window as\n    | { localStorage?: StorageLike; sessionStorage?: StorageLike }\n    | undefined;\n\n  if (!browserWindow) {\n    return memoryStorage;\n  }\n\n  if (location === \"localStorage\" && browserWindow.localStorage) {\n    return browserWindow.localStorage;\n  }\n\n  if (location === \"sessionStorage\" && browserWindow.sessionStorage) {\n    return browserWindow.sessionStorage;\n  }\n\n  return memoryStorage;\n};\n\nconst tokenKey = (clientId: string) => `msal_token_${clientId}`;\nconst accountKey = (clientId: string) => `msal_account_${clientId}`;\n\nconst parseAccount = (raw: string | null): AccountInfo | null => {\n  if (!raw) {\n    return null;\n  }\n\n  try {\n    return JSON.parse(raw) as AccountInfo;\n  } catch {\n    return null;\n  }\n};\n\nconst serializeToken = (token: AuthenticationResult): string =>\n  JSON.stringify({\n    ...token,\n    expiresOn: token.expiresOn?.toISOString(),\n  });\n\nconst parseToken = (raw: string | null): AuthenticationResult | null => {\n  if (!raw) {\n    return null;\n  }\n\n  try {\n    const parsed = JSON.parse(raw) as AuthenticationResult;\n    if (parsed.expiresOn && typeof parsed.expiresOn === \"string\") {\n      parsed.expiresOn = new Date(parsed.expiresOn);\n    }\n    return parsed;\n  } catch {\n    return null;\n  }\n};\n\nconst generateToken = (clientId: string, scopes?: string[]) => {\n  const payload = {\n    clientId,\n    scopes: scopes ?? [],\n    issuedAt: Date.now(),\n  };\n  return Buffer.from(JSON.stringify(payload)).toString(\"base64url\");\n};\n\nexport class PublicClientApplication {\n  private account: AccountInfo | null;\n  private token: AuthenticationResult | null;\n  private readonly storage: StorageLike | Map<string, string>;\n\n  constructor(private readonly configuration: Configuration) {\n    const store = getStorage(configuration.cache?.cacheLocation ?? \"sessionStorage\");\n    this.storage = store;\n    const accountRaw =\n      store instanceof Map\n        ? store.get(accountKey(configuration.auth.clientId)) ?? null\n        : store.getItem(accountKey(configuration.auth.clientId));\n    const tokenRaw =\n      store instanceof Map\n        ? store.get(tokenKey(configuration.auth.clientId)) ?? null\n        : store.getItem(tokenKey(configuration.auth.clientId));\n    this.account = parseAccount(accountRaw);\n    this.token = parseToken(tokenRaw);\n  }\n\n  async initialize(): Promise<void> {\n    // No asynchronous setup required for the shim.\n  }\n\n  getAllAccounts(): AccountInfo[] {\n    return this.account ? [this.account] : [];\n  }\n\n  async handleRedirectPromise(): Promise<AuthenticationResult | null> {\n    // Redirect flows are not simulated in the shim. Return the stored token if available.\n    return this.token;\n  }\n\n  async loginPopup(request: PopupRequest): Promise<AuthenticationResult> {\n    const account: AccountInfo = {\n      username: request.loginHint ?? this.account?.username ?? \"customai-user\",\n    };\n    const token: AuthenticationResult = {\n      accessToken: generateToken(this.configuration.auth.clientId, request.scopes),\n      account,\n      expiresOn: new Date(Date.now() + 60 * 60 * 1000),\n    };\n    this.persist(account, token);\n    return token;\n  }\n\n  async loginRedirect(request: RedirectRequest): Promise<void> {\n    const account: AccountInfo = {\n      username: request.loginHint ?? this.account?.username ?? \"customai-user\",\n    };\n    const token: AuthenticationResult = {\n      accessToken: generateToken(this.configuration.auth.clientId, request.scopes),\n      account,\n      expiresOn: new Date(Date.now() + 60 * 60 * 1000),\n    };\n    this.persist(account, token);\n  }\n\n  async acquireTokenSilent(request: SilentRequest): Promise<AuthenticationResult> {\n    if (this.token && this.token.expiresOn && this.token.expiresOn.getTime() > Date.now()) {\n      return this.token;\n    }\n\n    if (!this.account) {\n      throw new Error(\"No cached account is available for silent token acquisition.\");\n    }\n\n    const token: AuthenticationResult = {\n      accessToken: generateToken(this.configuration.auth.clientId, request.scopes),\n      account: this.account,\n      expiresOn: new Date(Date.now() + 60 * 60 * 1000),\n    };\n    this.persist(this.account, token);\n    return token;\n  }\n\n  async acquireTokenPopup(request: PopupRequest): Promise<AuthenticationResult> {\n    return this.loginPopup(request);\n  }\n\n  async acquireTokenRedirect(request: RedirectRequest): Promise<void> {\n    await this.loginRedirect(request);\n  }\n\n  async logoutPopup(): Promise<void> {\n    this.persist(null, null);\n  }\n\n  async logoutRedirect(): Promise<void> {\n    this.persist(null, null);\n  }\n\n  private persist(account: AccountInfo | null, token: AuthenticationResult | null) {\n    const clientId = this.configuration.auth.clientId;\n    if (this.storage instanceof Map) {\n      if (account) {\n        this.storage.set(accountKey(clientId), JSON.stringify(account));\n      } else {\n        this.storage.delete(accountKey(clientId));\n      }\n\n      if (token) {\n        this.storage.set(tokenKey(clientId), serializeToken(token));\n      } else {\n        this.storage.delete(tokenKey(clientId));\n      }\n    } else {\n      if (account) {\n        this.storage.setItem(accountKey(clientId), JSON.stringify(account));\n      } else {\n        this.storage.removeItem(accountKey(clientId));\n      }\n\n      if (token) {\n        this.storage.setItem(tokenKey(clientId), serializeToken(token));\n      } else {\n        this.storage.removeItem(tokenKey(clientId));\n      }\n    }\n\n    this.account = account;\n    this.token = token;\n  }\n}\n"]}