{"version":3,"file":"prompts.test.js","sourceRoot":"","sources":["../../../src/test/suite/prompts.test.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AAEjC,mDAA2D;AAC3D,2CAAqE;AAErE,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,MAAM,UAAU,GAAmB;QACjC,QAAQ,EAAE,QAAQ;QAClB,cAAc,EAAE,EAAE;QAClB,WAAW,EAAE,EAAE;QACf,YAAY,EAAE,EAAE;QAChB,cAAc,EAAE,EAAE;QAClB,YAAY,EAAE,EAAE;QAChB,WAAW,EAAE,EAAE;QACf,cAAc,EAAE,EAAE;QAClB,YAAY,EAAE,EAAE;QAChB,WAAW,EAAE,EAAE;QACf,YAAY,EAAE,EAAE;QAChB,kBAAkB,EAAE,oCAAoC;QACxD,qBAAqB,EAAE,CAAC,mBAAmB,CAAC;QAC5C,oBAAoB,EAAE,EAAE;KACzB,CAAC;IAEF,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACtE,MAAM,QAAQ,GAAG,IAAI,+BAAqB,EAAE,CAAC;QAC7C,MAAM,OAAO,GAAG,MAAM,IAAA,4BAAkB,EACtC,YAAY,EACZ,2BAA2B,EAC3B,UAAU,EACV,QAAQ,CACT,CAAC;QAEF,MAAM,CAAC,WAAW,CAChB,OAAO,CAAC,UAAU,EAClB,uDAAuD,CACxD,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;QACrE,MAAM,UAAU,GAAoB;YAClC;gBACE,EAAE,EAAE,mBAAmB;gBACvB,KAAK,CAAC,OAAO;oBACX,OAAO,oCAAoC,CAAC;gBAC9C,CAAC;aACF;SACF,CAAC;QACF,MAAM,QAAQ,GAAG,IAAI,+BAAqB,CAAC,UAAU,CAAC,CAAC;QACvD,MAAM,OAAO,GAAG,MAAM,IAAA,4BAAkB,EACtC,WAAW,EACX,8BAA8B,EAC9B,UAAU,EACV,QAAQ,CACT,CAAC;QAEF,MAAM,CAAC,EAAE,CACP,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,oCAAoC,CAAC,CAClE,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;QACnE,MAAM,QAAQ,GAAG,IAAI,+BAAqB,EAAE,CAAC;QAC7C,MAAM,OAAO,GAAG,MAAM,IAAA,4BAAkB,EAAC,MAAM,EAAE,MAAM,EAAE;YACvD,GAAG,UAAU;YACb,kBAAkB,EAAE,IAAI;SACzB,EAAE,QAAQ,CAAC,CAAC;QAEb,MAAM,CAAC,EAAE,CACP,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC,4CAA4C,CAAC,CAC5E,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;QAC1C,MAAM,QAAQ,GAAG,IAAI,+BAAqB,EAAE,CAAC;QAC7C,MAAM,OAAO,GAAG,MAAM,IAAA,4BAAkB,EAAC,MAAM,EAAE,qBAAqB,EAAE;YACtE,GAAG,UAAU;YACb,qBAAqB,EAAE,CAAC,kBAAkB,CAAC;SAC5C,EAAE,QAAQ,CAAC,CAAC;QAEb,MAAM,CAAC,WAAW,CAChB,OAAO,CAAC,UAAU,EAClB,6CAA6C,CAC9C,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import * as assert from 'assert';\nimport { ProviderConfig } from '../../ai/types';\nimport { buildPromptPayload } from '../../prompts/builder';\nimport { LineProcessor, LineProcessorRegistry } from '../../prompts';\n\ndescribe('Prompt builder', () => {\n  const baseConfig: ProviderConfig = {\n    provider: 'gemini',\n    geminiEndpoint: '',\n    geminiModel: '',\n    geminiApiKey: '',\n    openAiEndpoint: '',\n    openAiApiKey: '',\n    openAiModel: '',\n    customEndpoint: '',\n    customApiKey: '',\n    customModel: '',\n    systemPrompt: '',\n    basePromptTemplate: \"Explain '{{word}}' from '{{line}}'\",\n    lineContextAugmenters: ['fileLineReference'],\n    referenceSearchRoots: []\n  };\n\n  it('replaces word and line placeholders in the base prompt', async () => {\n    const registry = new LineProcessorRegistry();\n    const payload = await buildPromptPayload(\n      'identifier',\n      'const identifier = value;',\n      baseConfig,\n      registry\n    );\n\n    assert.strictEqual(\n      payload.userPrompt,\n      \"Explain 'identifier' from 'const identifier = value;'\"\n    );\n  });\n\n  it('appends supporting context from registered processors', async () => {\n    const processors: LineProcessor[] = [\n      {\n        id: 'fileLineReference',\n        async process() {\n          return 'Supporting context from processor.';\n        }\n      }\n    ];\n    const registry = new LineProcessorRegistry(processors);\n    const payload = await buildPromptPayload(\n      'file_line',\n      'file_line = \"src/main.rs:42\"',\n      baseConfig,\n      registry\n    );\n\n    assert.ok(\n      payload.userPrompt.includes('Supporting context from processor.')\n    );\n  });\n\n  it('falls back to default prompt when template is empty', async () => {\n    const registry = new LineProcessorRegistry();\n    const payload = await buildPromptPayload('word', 'line', {\n      ...baseConfig,\n      basePromptTemplate: '  '\n    }, registry);\n\n    assert.ok(\n      payload.userPrompt.startsWith('Explain the word \"word\" in plain language.')\n    );\n  });\n\n  it('ignores unknown processors', async () => {\n    const registry = new LineProcessorRegistry();\n    const payload = await buildPromptPayload('word', 'file_line = \"value\"', {\n      ...baseConfig,\n      lineContextAugmenters: ['unknownProcessor']\n    }, registry);\n\n    assert.strictEqual(\n      payload.userPrompt,\n      \"Explain 'word' from 'file_line = \\\"value\\\"'\"\n    );\n  });\n});\n"]}