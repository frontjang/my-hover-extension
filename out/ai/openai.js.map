{"version":3,"file":"openai.js","sourceRoot":"","sources":["../../src/ai/openai.ts"],"names":[],"mappings":"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","sourcesContent":["import * as http from 'http';\nimport * as https from 'https';\nimport * as vscode from 'vscode';\nimport { ChatMessage, ProviderSelection, PROVIDER_LABELS } from './types';\n\ntype OpenAIChoice = {\n  message?: {\n    content?: string;\n  };\n};\n\ninterface OpenAIResponse {\n  choices?: OpenAIChoice[];\n}\n\nexport interface OpenAIExplanationResult {\n  text?: string;\n  error?: string;\n}\n\nfunction coerceOpenAIErrorMessage(\n  provider: ProviderSelection,\n  statusCode: number | undefined,\n  body: string\n): string {\n  if (!body) {\n    return `${PROVIDER_LABELS[provider]} request failed with status ${statusCode ?? 'unknown'}.`;\n  }\n\n  try {\n    const parsed = JSON.parse(body) as { error?: { message?: string } };\n    const message = parsed.error?.message?.trim();\n\n    if (message) {\n      return `${PROVIDER_LABELS[provider]} request failed with status ${statusCode ?? 'unknown'}: ${message}`;\n    }\n  } catch (parseError) {\n    // Ignore JSON parse errors and fall back to the raw body below.\n  }\n\n  const sanitized = body.length > 500 ? `${body.slice(0, 497)}...` : body;\n  return `${PROVIDER_LABELS[provider]} request failed with status ${statusCode ?? 'unknown'}: ${sanitized.trim() || 'Unknown error.'}`;\n}\n\nexport async function fetchOpenAIStyleExplanation(\n  messages: ChatMessage[],\n  endpoint: string,\n  apiKey: string,\n  model: string,\n  token: vscode.CancellationToken,\n  provider: ProviderSelection\n): Promise<OpenAIExplanationResult> {\n  if (messages.length === 0) {\n    return { error: 'Prompt did not include any messages.' };\n  }\n\n  if (!endpoint) {\n    return { error: `${PROVIDER_LABELS[provider]} endpoint is not configured.` };\n  }\n\n  if (!apiKey) {\n    return { error: `${PROVIDER_LABELS[provider]} API key is not configured.` };\n  }\n\n  if (!model) {\n    return { error: `${PROVIDER_LABELS[provider]} model is not configured.` };\n  }\n\n  const payload = JSON.stringify({\n    model,\n    messages\n  });\n\n  const url = new URL(endpoint);\n\n  return new Promise<OpenAIExplanationResult>((resolve) => {\n    if (url.protocol !== 'http:' && url.protocol !== 'https:') {\n      resolve({ error: `${PROVIDER_LABELS[provider]} endpoint must use HTTP or HTTPS.` });\n      return;\n    }\n\n    const transport = url.protocol === 'http:' ? http : https;\n\n    const req = transport.request(\n      url,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-Length': Buffer.byteLength(payload),\n          Authorization: `Bearer ${apiKey}`\n        }\n      },\n      (res) => {\n        const chunks: Buffer[] = [];\n\n        res.on('data', (chunk) => {\n          chunks.push(chunk instanceof Buffer ? chunk : Buffer.from(chunk));\n        });\n\n        res.on('end', () => {\n          const body = Buffer.concat(chunks).toString('utf8');\n\n          if (res.statusCode && res.statusCode >= 200 && res.statusCode < 300) {\n            try {\n              const json = JSON.parse(body) as OpenAIResponse;\n              const choice = json.choices?.find((c) => !!c.message?.content);\n              const text = choice?.message?.content?.trim();\n\n              resolve(text ? { text } : { error: `${PROVIDER_LABELS[provider]} returned an empty response.` });\n            } catch (error) {\n              console.error(\n                `[MyHoverExtension] Failed to parse ${PROVIDER_LABELS[provider]} response:`,\n                error\n              );\n              const message = error instanceof Error ? error.message : 'Unknown parsing error.';\n              resolve({ error: `Failed to parse ${PROVIDER_LABELS[provider]} response: ${message}` });\n            }\n          } else {\n            console.error(\n              `[MyHoverExtension] ${PROVIDER_LABELS[provider]} request failed with status ${res.statusCode}: ${body}`\n            );\n            resolve({ error: coerceOpenAIErrorMessage(provider, res.statusCode, body) });\n          }\n        });\n      }\n    );\n\n    req.on('error', (error) => {\n      if (!token.isCancellationRequested) {\n        console.error(`[MyHoverExtension] ${PROVIDER_LABELS[provider]} request error:`, error);\n      }\n      const message = error instanceof Error ? error.message : String(error);\n      resolve({ error: `${PROVIDER_LABELS[provider]} request error: ${message}` });\n    });\n\n    token.onCancellationRequested(() => {\n      req.destroy(new Error('Cancelled'));\n      resolve({ error: `${PROVIDER_LABELS[provider]} request was cancelled.` });\n    });\n\n    req.write(payload);\n    req.end();\n  });\n}\n"]}