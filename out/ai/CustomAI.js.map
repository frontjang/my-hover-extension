{"version":3,"file":"CustomAI.js","sourceRoot":"","sources":["../../src/ai/CustomAI.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,2BAA8C;AAC9C,iCAA4C;AAC5C,+BAA0C;AAC1C,mCAA4B;AAK5B,oCAA0C;AAC1C,uCAA4F;AAC5F,mDAAqF;AAgBrF,MAAM,yBAAyB,GAAG,CAChC,KAAuB,EACa,EAAE;IACtC,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;AAChD,CAAC,CAAC;AAEF,MAAM,uBAAuB,GAAG,GAA0B,EAAE;IAC1D,MAAM,YAAY,GAA2B,EAAE,CAAC;IAChD,MAAM,kBAAkB,GAAG,IAAA,eAAS,EAAC,oBAAoB,CAAC,CAAC;IAC3D,IAAI,qBAAqB,GAAG,KAAK,CAAC;IAElC,IAAI,kBAAkB,EAAE,CAAC;QACvB,YAAY,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACtC,qBAAqB,GAAG,IAAI,CAAC;IAC/B,CAAC;IAED,MAAM,aAAa,GAAG,IAAA,eAAS,EAAC,yBAAyB,CAAC,CAAC;IAC3D,IAAI,SAAS,GAAG,CAAC,CAAC;IAElB,IAAI,aAAa,EAAE,CAAC;QAClB,MAAM,QAAQ,GAAG,aAAa;aAC3B,KAAK,CAAC,gBAAS,CAAC;aAChB,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;aAC5B,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAEvC,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE,CAAC;YAC/B,MAAM,YAAY,GAAG,IAAA,cAAO,EAAC,OAAO,CAAC,CAAC;YACtC,IAAI,CAAC,IAAA,eAAU,EAAC,YAAY,CAAC,EAAE,CAAC;gBAC9B,IAAA,kCAAkB,EAAC,wCAAwC,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC;gBACrF,SAAS;YACX,CAAC;YAED,IAAI,CAAC;gBACH,MAAM,QAAQ,GAAG,IAAA,iBAAY,EAAC,YAAY,CAAC,CAAC;gBAC5C,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC5B,SAAS,IAAI,CAAC,CAAC;YACjB,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,IAAA,kCAAkB,EAAC,wCAAwC,EAAE;oBAC3D,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;iBAC9D,CAAC,CAAC;YACL,CAAC;QACH,CAAC;IACH,CAAC;IAED,OAAO;QACL,YAAY,EAAE,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS;QAChE,SAAS;QACT,qBAAqB;KACtB,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,uBAAuB,GAAG,CAAC,IAIhC,EAAgD,EAAE;IACjD,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC5B,IAAA,gCAAgB,EAAC,gDAAgD,CAAC,CAAC;QACnE,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,MAAM,YAAY,GAAgD;QAChE,kBAAkB,EAAE,CAAC,IAAI,CAAC,sBAAsB;KACjD,CAAC;IAEF,IAAI,IAAI,CAAC,cAAc,EAAE,MAAM,EAAE,CAAC;QAChC,YAAY,CAAC,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC;IACxC,CAAC;IAED,MAAM,UAAU,GAAG,IAAI,aAAU,CAAC,YAAY,CAAC,CAAC;IAEhD,IAAA,gCAAgB,EAAC,kCAAkC,EAAE;QACnD,kBAAkB,EAAE,YAAY,CAAC,kBAAkB;QACnD,WAAW,EAAE,CAAC,CAAC,YAAY,CAAC,EAAE;KAC/B,CAAC,CAAC;IAEH,OAAO;QACL,UAAU;KACX,CAAC;AACJ,CAAC,CAAC;AAEF,2CAAyB;AAEzB,MAAa,QAAS,SAAQ,gBAAM;IAMlC,YAAY,OAAwB,EAAE;QACpC,MAAM,SAAS,GAAG,OAAO,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAE,UAAsC,CAAC,CAAC,CAAC,EAAE,CAAC;QAChG,MAAM,SAAS,GAAG,OAAO,SAAS,CAAC,MAAM,KAAK,WAAW,CAAC;QAC1D,IAAA,gCAAgB,EAAC,8BAA8B,EAAE;YAC/C,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM;YACvC,QAAQ,EAAE,OAAO,SAAS,CAAC,KAAK,KAAK,UAAU;YAC/C,SAAS,EAAE,SAAS;SACrB,CAAC,CAAC;QACH,MAAM,cAAc,GAAG,SAAS;YAC9B,CAAC,CAAC;gBACE,SAAS,EAAE,SAAS;gBACpB,UAAU,EAAE,SAAS;gBACrB,KAAK,EAAE,OAAO,SAAS,CAAC,KAAK,KAAK,UAAU,CAAC,CAAC,CAAE,SAAS,CAAC,KAAsB,CAAC,CAAC,CAAC,SAAS;aAC7F;YACH,CAAC,CAAC,EAAE,CAAC;QAEP,MAAM,yBAAyB,GAAG,IAAA,sBAAgB,EAAC,kCAAkC,CAAC,CAAC;QACvF,MAAM,yBAAyB,GAAG,IAAA,sBAAgB,EAAC,oCAAoC,CAAC,CAAC;QAEzF,MAAM,sBAAsB,GAC1B,IAAI,CAAC,sBAAsB,IAAI,CAAC,yBAAyB,IAAI,KAAK,CAAC,CAAC;QACtE,MAAM,sBAAsB,GAC1B,IAAI,CAAC,sBAAsB,IAAI,CAAC,yBAAyB,IAAI,KAAK,CAAC,CAAC;QAEtE,MAAM,oBAAoB,GAAG,yBAAyB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC5E,MAAM,wBAAwB,GAAG,oBAAoB,EAAE,MAAM,IAAI,CAAC,CAAC;QACnE,IAAI,cAAc,GAAG,oBAAoB,CAAC;QAC1C,MAAM,eAAe,GAAG,sBAAsB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,uBAAuB,EAAE,CAAC;QAEvF,IAAI,eAAe,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC;YAC1C,cAAc,GAAG,CAAC,GAAG,CAAC,cAAc,IAAI,EAAE,CAAC,EAAE,GAAG,eAAe,CAAC,YAAY,CAAC,CAAC;QAChF,CAAC;QAED,MAAM,iBAAiB,GAAG,cAAc,EAAE,MAAM,IAAI,CAAC,CAAC;QAEtD,MAAM,gBAAgB,GAAG,CAAC,SAAS;YACjC,CAAC,CAAC,uBAAuB,CAAC;gBACtB,sBAAsB;gBACtB,cAAc;gBACd,kBAAkB,EAAE,IAAI,CAAC,UAAU;aACpC,CAAC;YACJ,CAAC,CAAC,EAAE,CAAC;QAEP,IAAA,gCAAgB,EAAC,qCAAqC,EAAE;YACtD,sBAAsB;YACtB,sBAAsB;YACtB,oBAAoB,EAAE,wBAAwB;YAC9C,mBAAmB,EAAE,eAAe,EAAE,SAAS,IAAI,CAAC;YACpD,qBAAqB,EAAE,eAAe,EAAE,qBAAqB,IAAI,KAAK;YACtE,qBAAqB,EAAE,iBAAiB;YACxC,uBAAuB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU;YAC1C,wBAAwB,EAAE,CAAC,SAAS;SACrC,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,IAAA,eAAS,EAAC,kBAAkB,EAAE,gBAAgB,CAAC,CAAC;QAC9E,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,IAAA,qBAAe,EAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;QAC3E,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,IAAI,IAAA,qBAAe,EAAC,sBAAsB,EAAE,CAAC,CAAC,CAAC;QACjF,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,IAAA,eAAS,EAAC,mBAAmB,CAAC,CAAC;QAC/D,MAAM,uBAAuB,GAC3B,IAAI,CAAC,uBAAuB,IAAI,IAAA,sBAAgB,EAAC,wBAAwB,EAAE,IAAI,CAAC,CAAC;QAEnF,IAAA,gCAAgB,EAAC,uCAAuC,EAAE;YACxD,OAAO;YACP,OAAO;YACP,UAAU;YACV,uBAAuB;YACvB,MAAM,EAAE,IAAA,4BAAY,EAAC,MAAM,CAAC;YAC5B,YAAY,EAAE,QAAQ,CAAC,YAAY;SACpC,CAAC,CAAC;QAEH,KAAK,CAAC;YACJ,GAAG,IAAI;YACP,GAAG,cAAc;YACjB,GAAG,gBAAgB;YACnB,MAAM;YACN,OAAO;YACP,UAAU;YACV,OAAO;YACP,uBAAuB;SACxB,CAAC,CAAC;QApFK,mBAAc,GAAkB,IAAI,CAAC;QAsF7C,MAAM,UAAU,GAAI,IAAe,CAAC,MAAM,CAAC;QAE3C,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;YACpC,KAAK,EAAE,IAAI,sBAAc,CAAC,UAAU,CAAC;YACrC,QAAQ,EAAE,KAAK;YACf,YAAY,EAAE,KAAK;SACpB,CAAC,CAAC;QAEH,IAAA,gCAAgB,EAAC,6BAA6B,CAAC,CAAC;IAClD,CAAC;IAED,iBAAiB,CAAC,KAAa;QAC7B,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAC5B,IAAA,gCAAgB,EAAC,0BAA0B,EAAE;YAC3C,QAAQ,EAAE,CAAC,CAAC,KAAK;YACjB,WAAW,EAAE,KAAK,EAAE,MAAM,IAAI,CAAC;SAChC,CAAC,CAAC;IACL,CAAC;IAEkB,WAAW,CAAC,IAAyB;QACtD,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;YACxB,IAAA,gCAAgB,EAAC,qCAAqC,EAAE;gBACtD,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,MAAM,EAAE,IAAI,CAAC,MAAM;aACpB,CAAC,CAAC;YACH,OAAO,EAAE,aAAa,EAAE,UAAU,IAAI,CAAC,cAAc,EAAE,EAAE,CAAC;QAC5D,CAAC;QACD,MAAM,OAAO,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACxC,IAAA,gCAAgB,EAAC,4BAA4B,EAAE;YAC7C,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,MAAM,EAAE,IAAI,CAAC,MAAM;SACpB,CAAC,CAAC;QACH,OAAO,OAAO,CAAC;IACjB,CAAC;IAEkB,cAAc,CAAC,IAAyB;QACzD,MAAM,OAAO,GAAG,KAAK,CAAC,cAAc,CAAC,IAAI,CAA8C,CAAC;QACxF,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;YACxB,OAAO,OAAO,CAAC,qBAAqB,CAAC,CAAC;YACtC,OAAO,OAAO,CAAC,gBAAgB,CAAC,CAAC;YACjC,IAAA,gCAAgB,EAAC,yDAAyD,EAAE;gBAC1E,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,MAAM,EAAE,IAAI,CAAC,MAAM;aACpB,CAAC,CAAC;QACL,CAAC;QACD,IAAA,gCAAgB,EAAC,0BAA0B,EAAE;YAC3C,aAAa,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc;YACpC,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC;SACvC,CAAC,CAAC;QACH,OAAO,OAAO,CAAC;IACjB,CAAC;;AAzIH,4BA0IC;AAxIwB,qBAAY,GAAG,IAAA,mBAAa,EAAC,wBAAwB,CAAC,AAA1C,CAA2C","sourcesContent":["import { readFileSync, existsSync } from \"fs\";\nimport { Agent as HttpsAgent } from \"https\";\nimport { resolve, delimiter } from \"path\";\nimport OpenAI from \"openai\";\nimport type { Buffer } from \"node:buffer\";\nimport type { ClientOptions } from \"openai\";\nimport type { FinalRequestOptions } from \"openai/core\";\n\nimport { CustomAIModels } from \"../model\";\nimport { getEnvVar, getEnvVarBoolean, getEnvVarNumber, requireEnvVar } from \"../config/env\";\nimport { logCustomAIDebug, logCustomAIWarning, redactSecret } from \"./customAiDebug\";\n\nexport interface CustomAIOptions extends ClientOptions {\n  disableSSLVerification?: boolean;\n  caCertificates?: string | Buffer | Array<string | Buffer>;\n  disableAutoCertLoading?: boolean;\n}\n\ntype CertificateInput = string | Buffer | Array<string | Buffer> | undefined;\n\ninterface CertificateLoadResult {\n  certificates?: Array<string | Buffer>;\n  fileCount: number;\n  hadInlineCertificates: boolean;\n}\n\nconst normalizeCertificateInput = (\n  value: CertificateInput,\n): Array<string | Buffer> | undefined => {\n  if (!value) {\n    return undefined;\n  }\n\n  return Array.isArray(value) ? value : [value];\n};\n\nconst loadCertificatesFromEnv = (): CertificateLoadResult => {\n  const certificates: Array<string | Buffer> = [];\n  const inlineCertificates = getEnvVar(\"CUSTOMAI_CA_BUNDLE\");\n  let hadInlineCertificates = false;\n\n  if (inlineCertificates) {\n    certificates.push(inlineCertificates);\n    hadInlineCertificates = true;\n  }\n\n  const bundlePathRaw = getEnvVar(\"CUSTOMAI_CA_BUNDLE_PATH\");\n  let fileCount = 0;\n\n  if (bundlePathRaw) {\n    const segments = bundlePathRaw\n      .split(delimiter)\n      .map((entry) => entry.trim())\n      .filter((entry) => entry.length > 0);\n\n    for (const segment of segments) {\n      const resolvedPath = resolve(segment);\n      if (!existsSync(resolvedPath)) {\n        logCustomAIWarning(\"CustomAI CA bundle path does not exist\", { path: resolvedPath });\n        continue;\n      }\n\n      try {\n        const contents = readFileSync(resolvedPath);\n        certificates.push(contents);\n        fileCount += 1;\n      } catch (error) {\n        logCustomAIWarning(\"Failed to read CustomAI CA bundle file\", {\n          path: resolvedPath,\n          error: error instanceof Error ? error.message : String(error),\n        });\n      }\n    }\n  }\n\n  return {\n    certificates: certificates.length > 0 ? certificates : undefined,\n    fileCount,\n    hadInlineCertificates,\n  };\n};\n\nconst resolveNodeAgentOptions = (opts: {\n  disableSSLVerification: boolean;\n  caCertificates?: Array<string | Buffer>;\n  providedHttpsAgent?: ClientOptions[\"httpsAgent\"];\n}): { httpsAgent?: ClientOptions[\"httpsAgent\"] } => {\n  if (opts.providedHttpsAgent) {\n    logCustomAIDebug(\"Using caller-provided HTTPS agent for CustomAI\");\n    return {};\n  }\n\n  const agentOptions: ConstructorParameters<typeof HttpsAgent>[0] = {\n    rejectUnauthorized: !opts.disableSSLVerification,\n  };\n\n  if (opts.caCertificates?.length) {\n    agentOptions.ca = opts.caCertificates;\n  }\n\n  const httpsAgent = new HttpsAgent(agentOptions);\n\n  logCustomAIDebug(\"Constructed CustomAI HTTPS agent\", {\n    rejectUnauthorized: agentOptions.rejectUnauthorized,\n    hasCustomCA: !!agentOptions.ca,\n  });\n\n  return {\n    httpsAgent,\n  };\n};\n\nexport * from \"../model\";\n\nexport class CustomAI extends OpenAI {\n  protected azureAuthToken: string | null = null;\n  public static readonly defaultScope = requireEnvVar(\"CUSTOMAI_DEFAULT_SCOPE\");\n\n  public declare models: CustomAIModels;\n\n  constructor(opts: CustomAIOptions = {}) {\n    const globalRef = typeof globalThis === \"object\" ? (globalThis as Record<string, unknown>) : {};\n    const isBrowser = typeof globalRef.window !== \"undefined\";\n    logCustomAIDebug(\"Constructing CustomAI client\", {\n      runtime: isBrowser ? \"browser\" : \"node\",\n      hasFetch: typeof globalRef.fetch === \"function\",\n      hasWindow: isBrowser,\n    });\n    const browserOptions = isBrowser\n      ? {\n          httpAgent: undefined,\n          httpsAgent: undefined,\n          fetch: typeof globalRef.fetch === \"function\" ? (globalRef.fetch as typeof fetch) : undefined,\n        }\n      : {};\n\n    const disableSSLVerificationEnv = getEnvVarBoolean(\"CUSTOMAI_ALLOW_SELF_SIGNED_CERTS\");\n    const disableAutoCertLoadingEnv = getEnvVarBoolean(\"CUSTOMAI_DISABLE_AUTO_CERT_LOADING\");\n\n    const disableSSLVerification =\n      opts.disableSSLVerification ?? (disableSSLVerificationEnv ?? false);\n    const disableAutoCertLoading =\n      opts.disableAutoCertLoading ?? (disableAutoCertLoadingEnv ?? false);\n\n    const providedCertificates = normalizeCertificateInput(opts.caCertificates);\n    const providedCertificateCount = providedCertificates?.length ?? 0;\n    let caCertificates = providedCertificates;\n    const envCertificates = disableAutoCertLoading ? undefined : loadCertificatesFromEnv();\n\n    if (envCertificates?.certificates?.length) {\n      caCertificates = [...(caCertificates ?? []), ...envCertificates.certificates];\n    }\n\n    const usingCertificates = caCertificates?.length ?? 0;\n\n    const nodeAgentOptions = !isBrowser\n      ? resolveNodeAgentOptions({\n          disableSSLVerification,\n          caCertificates,\n          providedHttpsAgent: opts.httpsAgent,\n        })\n      : {};\n\n    logCustomAIDebug(\"Resolved CustomAI TLS configuration\", {\n      disableSSLVerification,\n      disableAutoCertLoading,\n      providedCertificates: providedCertificateCount,\n      envCertificateFiles: envCertificates?.fileCount ?? 0,\n      envInlineCertificates: envCertificates?.hadInlineCertificates ?? false,\n      finalCertificateCount: usingCertificates,\n      usingProvidedHttpsAgent: !!opts.httpsAgent,\n      applyingNodeAgentOptions: !isBrowser,\n    });\n\n    const apiKey = opts.apiKey ?? getEnvVar(\"CUSTOMAI_API_KEY\", \"customai_dummy\");\n    const timeout = opts.timeout ?? getEnvVarNumber(\"CUSTOMAI_TIMEOUT\", 30000);\n    const maxRetries = opts.maxRetries ?? getEnvVarNumber(\"CUSTOMAI_MAX_RETRIES\", 3);\n    const baseURL = opts.baseURL ?? getEnvVar(\"CUSTOMAI_BASE_URL\");\n    const dangerouslyAllowBrowser =\n      opts.dangerouslyAllowBrowser ?? getEnvVarBoolean(\"CUSTOMAI_ALLOW_BROWSER\", true);\n\n    logCustomAIDebug(\"Resolved CustomAI constructor options\", {\n      baseURL,\n      timeout,\n      maxRetries,\n      dangerouslyAllowBrowser,\n      apiKey: redactSecret(apiKey),\n      defaultScope: CustomAI.defaultScope,\n    });\n\n    super({\n      ...opts,\n      ...browserOptions,\n      ...nodeAgentOptions,\n      apiKey,\n      timeout,\n      maxRetries,\n      baseURL,\n      dangerouslyAllowBrowser,\n    });\n\n    const baseModels = (this as OpenAI).models;\n\n    Object.defineProperty(this, \"models\", {\n      value: new CustomAIModels(baseModels),\n      writable: false,\n      configurable: false,\n    });\n\n    logCustomAIDebug(\"CustomAI client initialized\");\n  }\n\n  setAzureAuthToken(token: string) {\n    this.azureAuthToken = token;\n    logCustomAIDebug(\"Azure auth token updated\", {\n      hasToken: !!token,\n      tokenLength: token?.length ?? 0,\n    });\n  }\n\n  protected override authHeaders(opts: FinalRequestOptions): Record<string, string | null | undefined> {\n    if (this.azureAuthToken) {\n      logCustomAIDebug(\"Applying Azure auth header override\", {\n        path: opts.path,\n        method: opts.method,\n      });\n      return { Authorization: `Bearer ${this.azureAuthToken}` };\n    }\n    const headers = super.authHeaders(opts);\n    logCustomAIDebug(\"Using default auth headers\", {\n      path: opts.path,\n      method: opts.method,\n    });\n    return headers;\n  }\n\n  protected override defaultHeaders(opts: FinalRequestOptions): Record<string, string | null | undefined> {\n    const headers = super.defaultHeaders(opts) as Record<string, string | null | undefined>;\n    if (this.azureAuthToken) {\n      delete headers[\"OpenAI-Organization\"];\n      delete headers[\"OpenAI-Project\"];\n      logCustomAIDebug(\"Removed OpenAI-specific headers due to Azure auth token\", {\n        path: opts.path,\n        method: opts.method,\n      });\n    }\n    logCustomAIDebug(\"Computed default headers\", {\n      hasAzureToken: !!this.azureAuthToken,\n      headerKeys: Object.keys(headers ?? {}),\n    });\n    return headers;\n  }\n}\n"]}