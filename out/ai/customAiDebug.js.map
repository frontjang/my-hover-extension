{"version":3,"file":"customAiDebug.js","sourceRoot":"","sources":["../../src/ai/customAiDebug.ts"],"names":[],"mappings":"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","sourcesContent":["import { getEnvVarBoolean } from '../config/env';\n\ntype Jsonish =\n  | string\n  | number\n  | boolean\n  | null\n  | Jsonish[]\n  | { [key: string]: Jsonish };\n\ntype LogLevel = 'log' | 'warn' | 'error';\n\ntype CustomAILogSink = (\n  level: LogLevel,\n  message: string,\n  extra?: Record<string, unknown>\n) => void;\n\nconst SECRET_KEY_PATTERN = /(token|secret|key|authorization|password)/i;\n\nconst debugFlag = getEnvVarBoolean('CUSTOMAI_DEBUG_LOGS');\nconst DEBUG_ENABLED = debugFlag === undefined ? true : debugFlag;\n\nconst logSinks = new Set<CustomAILogSink>();\n\nexport function registerCustomAILogSink(sink: CustomAILogSink): () => void {\n  logSinks.add(sink);\n  return () => {\n    logSinks.delete(sink);\n  };\n}\n\nfunction shouldRedact(keyPath: string): boolean {\n  return SECRET_KEY_PATTERN.test(keyPath);\n}\n\nexport function redactSecret(value: string | null | undefined): string {\n  if (!value) {\n    return '<empty>';\n  }\n\n  const trimmed = value.trim();\n  if (!trimmed) {\n    return '<empty>';\n  }\n\n  const visible = trimmed.slice(-4);\n  const prefix = trimmed.length > 4 ? 'â€¦' : '';\n  return `***${prefix}${visible} (len=${trimmed.length})`;\n}\n\nfunction sanitize(value: unknown, keyPath: string): Jsonish {\n  if (value === null || value === undefined) {\n    return null;\n  }\n\n  if (typeof value === 'string') {\n    return shouldRedact(keyPath) ? redactSecret(value) : value;\n  }\n\n  if (typeof value === 'number' || typeof value === 'boolean') {\n    return value;\n  }\n\n  if (Array.isArray(value)) {\n    return value.map((entry, idx) => sanitize(entry, `${keyPath}[${idx}]`));\n  }\n\n  if (typeof value === 'object') {\n    const entries = Object.entries(value as Record<string, unknown>).map(([key, entry]) => [\n      key,\n      sanitize(entry, keyPath ? `${keyPath}.${key}` : key)\n    ]);\n    return Object.fromEntries(entries);\n  }\n\n  return String(value);\n}\n\nexport function sanitizeForLogging<T>(payload: T): T {\n  return sanitize(payload, '') as T;\n}\n\nfunction logWith(level: LogLevel, message: string, extra?: Record<string, unknown>): void {\n  if (!DEBUG_ENABLED) {\n    return;\n  }\n\n  const sanitizedExtra = extra && Object.keys(extra).length > 0 ? sanitizeForLogging(extra) : undefined;\n\n  if (sanitizedExtra) {\n    // eslint-disable-next-line no-console\n    console[level](`[CustomAI] ${message}`, sanitizedExtra);\n  } else {\n    // eslint-disable-next-line no-console\n    console[level](`[CustomAI] ${message}`);\n  }\n\n  if (logSinks.size > 0) {\n    for (const sink of logSinks) {\n      try {\n        sink(level, message, sanitizedExtra);\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('[CustomAI] Log sink error', {\n          error: error instanceof Error ? error.message : String(error),\n        });\n      }\n    }\n  }\n}\n\nexport function logCustomAIDebug(message: string, extra?: Record<string, unknown>): void {\n  logWith('log', message, extra);\n}\n\nexport function logCustomAIWarning(message: string, extra?: Record<string, unknown>): void {\n  logWith('warn', message, extra);\n}\n\nexport function logCustomAIError(message: string, extra?: Record<string, unknown>): void {\n  logWith('error', message, extra);\n}\n"]}