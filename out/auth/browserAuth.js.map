{"version":3,"file":"browserAuth.js","sourceRoot":"","sources":["../../src/auth/browserAuth.ts"],"names":[],"mappings":"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","sourcesContent":["import { PublicClientApplication } from \"@azure/msal-browser\";\nimport type {\n  PopupRequest,\n  RedirectRequest,\n  SilentRequest,\n  Configuration,\n} from \"@azure/msal-browser\";\nimport type { AccountInfo, AuthenticationResult } from \"@azure/msal-browser\";\n\nexport type InteractionType = \"popup\" | \"redirect\";\n\nexport interface BrowserAuthConfig {\n  clientId: string;\n  tenantId: string;\n  authority?: string;\n  redirectUri: string;\n  postLogoutRedirectUri?: string;\n  cacheLocation?: \"localStorage\" | \"sessionStorage\" | \"memoryStorage\";\n  defaultScopes?: string[];\n  interactionType?: InteractionType;\n  loginHint?: string;\n}\n\nexport class BrowserAuthClient {\n  private readonly msal: PublicClientApplication;\n  private account: AccountInfo | null = null;\n  private readonly defaultScopes: string[];\n  private readonly interactionType: InteractionType;\n  private isInitialized = false;\n\n  constructor(cfg: BrowserAuthConfig) {\n    const authority = cfg.authority ?? `https://login.microsoftonline.com/${cfg.tenantId}/v2.0`;\n    const config: Configuration = {\n      auth: {\n        clientId: cfg.clientId,\n        authority,\n        redirectUri: cfg.redirectUri,\n        postLogoutRedirectUri: cfg.postLogoutRedirectUri,\n        navigateToLoginRequestUrl: false,\n      },\n      cache: {\n        cacheLocation: cfg.cacheLocation ?? \"sessionStorage\",\n        storeAuthStateInCookie: false,\n      },\n      system: {\n        allowRedirectInIframe: true,\n        iframeHashTimeout: 10000,\n      },\n    };\n\n    this.msal = new PublicClientApplication(config);\n    this.defaultScopes = cfg.defaultScopes ?? [];\n    this.interactionType = cfg.interactionType ?? \"popup\";\n  }\n\n  async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      return;\n    }\n\n    try {\n      await this.msal.initialize();\n      this.isInitialized = true;\n      const accounts = this.msal.getAllAccounts();\n      this.account = accounts[0] ?? null;\n    } catch (error) {\n      console.error(\"MSAL initialization failed:\", error);\n      throw error;\n    }\n  }\n\n  async hydrateFromRedirect(): Promise<void> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    const res = await this.msal.handleRedirectPromise();\n    if (res?.account) {\n      this.account = res.account;\n    }\n    if (!this.account) {\n      const accounts = this.msal.getAllAccounts();\n      this.account = accounts[0] ?? null;\n    }\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.account;\n  }\n\n  getAccount(): AccountInfo | null {\n    return this.account;\n  }\n\n  async authenticate(scopes?: string[]): Promise<AuthenticationResult> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    const effectiveScopes = scopes?.length ? scopes : this.defaultScopes;\n\n    if (this.account) {\n      try {\n        const req: SilentRequest = { account: this.account, scopes: effectiveScopes };\n        return await this.msal.acquireTokenSilent(req);\n      } catch (silentError) {\n        console.warn(\"Silent token acquisition failed:\", silentError);\n      }\n    }\n\n    const req: PopupRequest & RedirectRequest = { scopes: effectiveScopes };\n    const res =\n      this.interactionType === \"redirect\"\n        ? await this.loginRedirectThenAwait(req)\n        : await this.msal.loginPopup(req);\n    this.account = res.account ?? null;\n    return res;\n  }\n\n  async getAccessToken(scopes?: string[]): Promise<string> {\n    const res = await this.authenticate(scopes);\n    return res.accessToken;\n  }\n\n  async logout(): Promise<void> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    if (this.interactionType === \"redirect\") {\n      await this.msal.logoutRedirect();\n    } else {\n      await this.msal.logoutPopup();\n    }\n    this.account = null;\n  }\n\n  private async loginRedirectThenAwait(req: RedirectRequest, isAcquire = false) {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    if (isAcquire) {\n      await this.msal.acquireTokenRedirect(req);\n    } else {\n      await this.msal.loginRedirect(req);\n    }\n    const res = await this.msal.handleRedirectPromise();\n    if (!res) {\n      throw new Error(\"Redirect initiated. Call hydrateFromRedirect() on startup.\");\n    }\n    return res;\n  }\n}\n"]}