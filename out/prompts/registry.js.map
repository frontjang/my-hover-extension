{"version":3,"file":"registry.js","sourceRoot":"","sources":["../../src/prompts/registry.ts"],"names":[],"mappings":";;;AAEA,MAAa,qBAAqB;IAGhC,YAAY,oBAAqC,EAAE;QACjD,IAAI,CAAC,UAAU,GAAG,IAAI,GAAG,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;IAC7F,CAAC;IAED,QAAQ,CAAC,SAAwB;QAC/B,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;IAC/C,CAAC;IAED,GAAG,CAAC,EAAU;QACZ,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACjC,CAAC;IAED,KAAK,CAAC,OAAO,CACX,MAA2B,EAC3B,YAA+B;QAE/B,MAAM,QAAQ,GAAa,EAAE,CAAC;QAE9B,KAAK,MAAM,EAAE,IAAI,YAAY,EAAE,CAAC;YAC9B,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YAE/B,IAAI,CAAC,SAAS,EAAE,CAAC;gBACf,SAAS;YACX,CAAC;YAED,IAAI,CAAC;gBACH,MAAM,YAAY,GAAG,MAAM,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBAErD,IAAI,YAAY,EAAE,CAAC;oBACjB,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAC9B,CAAC;YACH,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CACX,sCAAsC,EAAE,WAAW,EACnD,KAAK,CACN,CAAC;YACJ,CAAC;QACH,CAAC;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF;AA5CD,sDA4CC","sourcesContent":["import { LineProcessor, LineProcessorParams } from './types';\n\nexport class LineProcessorRegistry {\n  private readonly processors: Map<string, LineProcessor>;\n\n  constructor(initialProcessors: LineProcessor[] = []) {\n    this.processors = new Map(initialProcessors.map((processor) => [processor.id, processor]));\n  }\n\n  register(processor: LineProcessor): void {\n    this.processors.set(processor.id, processor);\n  }\n\n  get(id: string): LineProcessor | undefined {\n    return this.processors.get(id);\n  }\n\n  async collect(\n    params: LineProcessorParams,\n    processorIds: readonly string[]\n  ): Promise<string[]> {\n    const contexts: string[] = [];\n\n    for (const id of processorIds) {\n      const processor = this.get(id);\n\n      if (!processor) {\n        continue;\n      }\n\n      try {\n        const augmentation = await processor.process(params);\n\n        if (augmentation) {\n          contexts.push(augmentation);\n        }\n      } catch (error) {\n        console.error(\n          `[MyHoverExtension] Line processor \"${id}\" failed:`,\n          error\n        );\n      }\n    }\n\n    return contexts;\n  }\n}\n"]}