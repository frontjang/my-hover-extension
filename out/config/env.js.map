{"version":3,"file":"env.js","sourceRoot":"","sources":["../../src/config/env.ts"],"names":[],"mappings":"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","sourcesContent":["import { existsSync, readFileSync } from \"fs\";\nimport { resolve } from \"path\";\n\nlet envFileLoaded = false;\nconst envFileValues: Record<string, string> = {};\n\nconst parseEnvValue = (rawValue: string): string => {\n  const withoutCarriageReturn = rawValue.replace(/\\r$/, \"\");\n  const value = withoutCarriageReturn.trim();\n\n  if (value.length === 0) {\n    return \"\";\n  }\n\n  const firstChar = value[0];\n  const lastChar = value[value.length - 1];\n\n  if ((firstChar === '\"' && lastChar === '\"') || (firstChar === \"'\" && lastChar === \"'\")) {\n    const inner = value.slice(1, -1);\n    return inner.replace(/\\\\n/g, \"\\n\").replace(/\\\\r/g, \"\\r\");\n  }\n\n  return value;\n};\n\nconst loadEnvFile = (): void => {\n  if (envFileLoaded) {\n    return;\n  }\n\n  envFileLoaded = true;\n\n  const envPath = resolve(__dirname, \"../../.env\");\n\n  if (!existsSync(envPath)) {\n    return;\n  }\n\n  const contents = readFileSync(envPath, \"utf8\");\n\n  for (const rawLine of contents.split(/\\r?\\n/)) {\n    if (!rawLine) {\n      continue;\n    }\n\n    const trimmedLine = rawLine.trim();\n\n    if (trimmedLine.length === 0 || trimmedLine.startsWith(\"#\")) {\n      continue;\n    }\n\n    const separatorIndex = rawLine.indexOf(\"=\");\n\n    if (separatorIndex === -1) {\n      continue;\n    }\n\n    let key = rawLine.slice(0, separatorIndex).trim();\n\n    if (key.startsWith(\"export \")) {\n      key = key.slice(\"export \".length).trim();\n    }\n\n    if (!key) {\n      continue;\n    }\n\n    const value = parseEnvValue(rawLine.slice(separatorIndex + 1));\n\n    envFileValues[key] = value;\n\n    if (process.env[key] === undefined) {\n      process.env[key] = value;\n    }\n  }\n};\n\nexport const getEnvVar = (name: string, fallback?: string): string | undefined => {\n  loadEnvFile();\n\n  const envValue = process.env[name] ?? envFileValues[name];\n\n  if (envValue === undefined || envValue === \"\") {\n    return fallback;\n  }\n\n  return envValue;\n};\n\nexport const requireEnvVar = (name: string): string => {\n  const value = getEnvVar(name);\n  if (value === undefined) {\n    throw new Error(`Missing required environment variable: ${name}`);\n  }\n  return value;\n};\n\nexport const getEnvVarNumber = (name: string, fallback?: number): number | undefined => {\n  const value = getEnvVar(name);\n  if (value === undefined) {\n    return fallback;\n  }\n  const parsed = Number(value);\n  return Number.isFinite(parsed) ? parsed : fallback;\n};\n\nexport const getEnvVarBoolean = (name: string, fallback?: boolean): boolean | undefined => {\n  const value = getEnvVar(name);\n  if (value === undefined) {\n    return fallback;\n  }\n  switch (value.toLowerCase()) {\n    case \"true\":\n    case \"1\":\n    case \"yes\":\n      return true;\n    case \"false\":\n    case \"0\":\n    case \"no\":\n      return false;\n    default:\n      return fallback;\n  }\n};\n"]}