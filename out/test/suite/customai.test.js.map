{"version":3,"file":"customai.test.js","sourceRoot":"","sources":["../../../src/test/suite/customai.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as assert from 'assert';\nimport { mkdirSync, rmSync, writeFileSync } from 'fs';\nimport * as Module from 'module';\nimport { join, resolve } from 'path';\n\nimport { registerCustomAILogSink } from '../../ai/customAiDebug';\n\nconst ensureEnv = (key: string, value: string) => {\n  if (!process.env[key]) {\n    process.env[key] = value;\n  }\n};\n\ninterface ModuleLoader extends Module.Module {\n  _load(request: string, parent: NodeModule | null, isMain: boolean): unknown;\n  [key: symbol]: unknown;\n}\n\nconst moduleRuntime = Module as unknown as ModuleLoader;\nconst originalModuleLoad = moduleRuntime._load;\nconst moduleLoadPatchedFlag = Symbol.for('customai.test.moduleLoadPatched');\n\nif (!moduleRuntime[moduleLoadPatchedFlag]) {\n  moduleRuntime[moduleLoadPatchedFlag] = true;\n  moduleRuntime._load = function patchedLoad(\n    request: string,\n    parent: NodeModule | null,\n    isMain: boolean,\n  ): unknown {\n    if (request === 'openai') {\n      return originalModuleLoad.call(moduleRuntime, resolve(__dirname, '../../vendor/openai'), parent, isMain);\n    }\n    if (request === 'openai/core') {\n      return originalModuleLoad.call(\n        moduleRuntime,\n        resolve(__dirname, '../../vendor/openai-core'),\n        parent,\n        isMain,\n      );\n    }\n    if (request === '@azure/msal-browser') {\n      return originalModuleLoad.call(\n        moduleRuntime,\n        resolve(__dirname, '../../vendor/msal-browser'),\n        parent,\n        isMain,\n      );\n    }\n    return originalModuleLoad.call(moduleRuntime, request, parent, isMain);\n  };\n}\n\ndescribe('CustomAI TLS diagnostics', () => {\n  let CustomAIModule: typeof import('../../ai/CustomAI');\n\n  before(() => {\n    ensureEnv('CUSTOMAI_DEFAULT_SCOPE', 'api://test/.default');\n    ensureEnv('CUSTOMAI_API_KEY', 'test-api-key');\n    delete require.cache[require.resolve('../../ai/CustomAI')];\n    CustomAIModule = require('../../ai/CustomAI');\n  });\n\n  it('loads certificates from EGADCerts directories', () => {\n    const projectRoot = resolve(__dirname, '../../..');\n    const egadRoot = join(projectRoot, 'EGADCerts');\n    const certsDir = join(egadRoot, 'certs');\n    mkdirSync(certsDir, { recursive: true });\n    const certPath = join(certsDir, 'test-cert.pem');\n    writeFileSync(certPath, '-----BEGIN CERTIFICATE-----\\nTEST\\n-----END CERTIFICATE-----');\n\n    let result: ReturnType<\n      typeof CustomAIModule.__customAITestHooks.loadCertificatesFromEnvForTest\n    > | undefined;\n    try {\n      result = CustomAIModule.__customAITestHooks.loadCertificatesFromEnvForTest();\n    } finally {\n      rmSync(egadRoot, { recursive: true, force: true });\n    }\n\n    if (!result) {\n      assert.fail('expected certificate load result');\n      return;\n    }\n\n    const normalizedDirectories = result.defaultDirectoriesApplied.map((dir) =>\n      dir.replace(/\\\\+/g, '/'),\n    );\n\n    assert.ok(result.certificates && result.certificates.length > 0, 'expected certificates');\n    assert.ok(\n      normalizedDirectories.some((dir) => dir.endsWith('EGADCerts/certs')),\n      'expected EGADCerts directory to be applied',\n    );\n    assert.ok(result.directoryCertificateCount >= 1, 'expected certificate count from directory');\n  });\n\n  it('emits diagnostic logs when fetch rejects with TLS errors', async () => {\n    const logs: Array<{ level: string; message: string; extra?: Record<string, unknown> }> = [];\n    const dispose = registerCustomAILogSink((level, message, extra) => {\n      logs.push({ level, message, extra });\n    });\n\n    const tlsError = new Error('TLS handshake failed');\n    (tlsError as NodeJS.ErrnoException).code = 'SELF_SIGNED_CERT_IN_CHAIN';\n\n    const wrappedFetch = CustomAIModule.__customAITestHooks.createDiagnosticFetchForTest(\n      async () => {\n        throw tlsError;\n      },\n    );\n\n    assert.ok(wrappedFetch, 'expected diagnostic fetch wrapper');\n\n    try {\n      await assert.rejects(() => wrappedFetch('https://example.test/resource', { method: 'POST' }));\n    } finally {\n      dispose();\n    }\n\n    const failureLog = logs.find((entry) => entry.message === 'CustomAI fetch failed');\n    assert.ok(failureLog, 'expected failure log entry');\n    assert.strictEqual(failureLog?.level, 'warn');\n    assert.strictEqual(failureLog?.extra?.errorCode, 'SELF_SIGNED_CERT_IN_CHAIN');\n    assert.strictEqual(failureLog?.extra?.method, 'POST');\n    assert.ok(\n      typeof failureLog?.extra?.url === 'string' &&\n        (failureLog.extra.url as string).includes('https://example.test/resource'),\n      'expected URL to be logged',\n    );\n  });\n});\n\ndescribe('CustomAIBrowser wrappers', () => {\n  let CustomAIBrowser: typeof import('../../ai/index.browser').CustomAIBrowser;\n\n  before(() => {\n    ensureEnv('CUSTOMAI_DEFAULT_SCOPE', 'api://test/.default');\n    ensureEnv('CUSTOMAI_API_KEY', 'test-api-key');\n    ensureEnv('CUSTOM_CLIENT_ID', 'client-id');\n    ensureEnv('CUSTOM_TENANT_ID', 'tenant-id');\n    delete require.cache[require.resolve('../../ai/index.browser')];\n    CustomAIBrowser = require('../../ai/index.browser').CustomAIBrowser;\n  });\n\n  it('performs popup authentication and updates legacy aliases', async () => {\n    const client = new CustomAIBrowser();\n    assert.strictEqual(client.customaiIsAuthenticated(), false);\n\n    await client.customaiAuthenticateInBrowser();\n\n    assert.strictEqual(client.customaiIsAuthenticated(), true);\n    assert.strictEqual(client.ericaiIsAuthenticated(), true);\n    const username = client.customaiAuthenticatedUser();\n    assert.ok(typeof username === 'string' && username.length > 0);\n    assert.strictEqual(username, client.ericaiAuthenticatedUser());\n  });\n\n  it('supports logout through legacy EricAI helpers', async () => {\n    const client = new CustomAIBrowser();\n    await client.ericaiAuthenticateInBrowser([CustomAIBrowser.defaultScope]);\n    assert.strictEqual(client.ericaiIsAuthenticated(), true);\n\n    await client.ericaiLogout();\n\n    assert.strictEqual(client.customaiIsAuthenticated(), false);\n  });\n});\n"]}