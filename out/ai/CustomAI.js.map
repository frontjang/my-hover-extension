{"version":3,"file":"CustomAI.js","sourceRoot":"","sources":["../../src/ai/CustomAI.ts"],"names":[],"mappings":"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","sourcesContent":["import { readFileSync, existsSync, readdirSync, statSync } from \"fs\";\nimport { Agent as HttpsAgent } from \"https\";\nimport { resolve, delimiter, extname } from \"path\";\nimport OpenAI from \"openai\";\nimport type { Buffer } from \"node:buffer\";\nimport type { ClientOptions } from \"openai\";\nimport type { FinalRequestOptions } from \"openai/core\";\n\nimport { CustomAIModels } from \"../model\";\nimport { getEnvVar, getEnvVarBoolean, getEnvVarNumber, requireEnvVar } from \"../config/env\";\nimport { logCustomAIDebug, logCustomAIWarning, redactSecret } from \"./customAiDebug\";\n\nexport interface CustomAIOptions extends ClientOptions {\n  disableSSLVerification?: boolean;\n  caCertificates?: string | Buffer | Array<string | Buffer>;\n  disableAutoCertLoading?: boolean;\n}\n\ntype CertificateInput = string | Buffer | Array<string | Buffer> | undefined;\n\ntype GenericFetch = (input: unknown, init?: unknown) => Promise<unknown>;\n\ninterface CertificateLoadResult {\n  certificates?: Array<string | Buffer>;\n  fileCount: number;\n  directoryCertificateCount: number;\n  hadInlineCertificates: boolean;\n  directoriesSearched: string[];\n  directoriesWithCertificates: string[];\n  defaultDirectoriesApplied: string[];\n  envDirectoriesApplied: string[];\n}\n\ninterface CertificateLoadSummary {\n  fileCount: number;\n  directoryCertificateCount: number;\n  directoriesSearched: string[];\n  directoriesWithCertificates: string[];\n  defaultDirectoriesApplied: string[];\n  envDirectoriesApplied: string[];\n}\n\nconst CERTIFICATE_FILE_EXTENSIONS = new Set([\".crt\", \".cer\", \".pem\", \".der\", \".p7b\", \".pfx\"]);\nconst DEFAULT_CERTIFICATE_DIRECTORIES = [\"EGADCerts\", \"EGADCerts/certs\"];\n\nconst fetchWrapperCache = new WeakMap<GenericFetch, GenericFetch>();\nlet fetchRequestCounter = 0;\nlet fetchDiagnosticsWarningIssued = false;\n\nconst getHeaderKeys = (headers: unknown): string[] | undefined => {\n  if (!headers) {\n    return undefined;\n  }\n\n  if (Array.isArray(headers)) {\n    return headers\n      .map((entry) => (Array.isArray(entry) && entry.length > 0 ? String(entry[0]) : undefined))\n      .filter((entry): entry is string => typeof entry === \"string\");\n  }\n\n  if (typeof headers === \"object\") {\n    const maybeHeaders = headers as { forEach?: unknown } & Record<string, unknown>;\n\n    if (typeof maybeHeaders.forEach === \"function\") {\n      const collected: string[] = [];\n      try {\n        maybeHeaders.forEach((_: unknown, key: unknown) => {\n          if (typeof key === \"string\") {\n            collected.push(key);\n          }\n        });\n      } catch {\n        // Ignore errors from custom header implementations.\n      }\n      return collected;\n    }\n\n    return Object.keys(maybeHeaders);\n  }\n\n  return undefined;\n};\n\nconst extractUrlFromRequest = (input: unknown): string | undefined => {\n  if (!input) {\n    return undefined;\n  }\n\n  if (typeof input === \"string\") {\n    return input;\n  }\n\n  if (input instanceof URL) {\n    return input.toString();\n  }\n\n  if (typeof input === \"object\") {\n    const maybeRequest = input as { url?: unknown; href?: unknown };\n    const fromUrl = maybeRequest.url;\n    if (typeof fromUrl === \"string\") {\n      return fromUrl;\n    }\n    if (fromUrl instanceof URL) {\n      return fromUrl.toString();\n    }\n    const href = maybeRequest.href;\n    if (typeof href === \"string\") {\n      return href;\n    }\n  }\n\n  return undefined;\n};\n\nconst extractMethodFromRequest = (input: unknown, init: unknown): string | undefined => {\n  const fromInit =\n    init && typeof init === \"object\" && typeof (init as { method?: unknown }).method === \"string\"\n      ? ((init as { method?: unknown }).method as string)\n      : undefined;\n\n  if (fromInit) {\n    return fromInit.toUpperCase();\n  }\n\n  if (input && typeof input === \"object\" && typeof (input as { method?: unknown }).method === \"string\") {\n    return ((input as { method?: unknown }).method as string).toUpperCase();\n  }\n\n  return undefined;\n};\n\nconst extractFetchDiagnostics = (\n  input: unknown,\n  init: unknown,\n): { url?: string; method?: string; headerKeys?: string[]; hasBody?: boolean } => {\n  const url = extractUrlFromRequest(input);\n  const method = extractMethodFromRequest(input, init);\n  const headers =\n    init && typeof init === \"object\" ? (init as { headers?: unknown }).headers : undefined;\n  const headerKeys = getHeaderKeys(headers);\n  const hasBody =\n    !!(\n      init &&\n      typeof init === \"object\" &&\n      \"body\" in (init as { [key: string]: unknown }) &&\n      (init as { body?: unknown }).body !== undefined\n    );\n\n  return { url, method, headerKeys, hasBody };\n};\n\nconst extractErrorDiagnostics = (error: unknown): Record<string, unknown> => {\n  if (!error || typeof error !== \"object\") {\n    return { errorMessage: String(error) };\n  }\n\n  const diagnostics: Record<string, unknown> = {};\n  const err = error as { [key: string]: unknown };\n\n  if (typeof err.name === \"string\") {\n    diagnostics.errorName = err.name;\n  }\n\n  if (typeof err.message === \"string\") {\n    diagnostics.errorMessage = err.message;\n  }\n\n  if (typeof err.stack === \"string\") {\n    diagnostics.errorStack = err.stack;\n  }\n\n  if (typeof (err as { code?: unknown }).code === \"string\") {\n    diagnostics.errorCode = (err as { code?: string }).code;\n  }\n\n  if (typeof (err as { errno?: unknown }).errno === \"number\") {\n    diagnostics.errno = (err as { errno?: number }).errno;\n  }\n\n  const cause = (err as { cause?: unknown }).cause;\n  if (cause && typeof cause === \"object\") {\n    const causeObj = cause as { [key: string]: unknown };\n    if (typeof causeObj.message === \"string\") {\n      diagnostics.causeMessage = causeObj.message;\n    }\n    if (typeof causeObj.name === \"string\") {\n      diagnostics.causeName = causeObj.name;\n    }\n    if (typeof (causeObj as { code?: unknown }).code === \"string\") {\n      diagnostics.causeCode = (causeObj as { code?: string }).code;\n    }\n  }\n\n  const response = (err as { response?: unknown }).response;\n  if (response && typeof response === \"object\") {\n    const responseObj = response as { [key: string]: unknown };\n    if (typeof responseObj.status === \"number\") {\n      diagnostics.responseStatus = responseObj.status;\n    }\n    if (typeof responseObj.statusText === \"string\") {\n      diagnostics.responseStatusText = responseObj.statusText;\n    }\n  }\n\n  return diagnostics;\n};\n\nconst createDiagnosticFetch = (baseFetch?: GenericFetch): GenericFetch | undefined => {\n  if (!baseFetch) {\n    return undefined;\n  }\n\n  const existing = fetchWrapperCache.get(baseFetch);\n  if (existing) {\n    return existing;\n  }\n\n  const wrapped: GenericFetch = async (input, init) => {\n    const requestId = ++fetchRequestCounter;\n    const diagnostics = extractFetchDiagnostics(input, init);\n    logCustomAIDebug(\"Dispatching CustomAI fetch request\", {\n      requestId,\n      ...diagnostics,\n    });\n\n    try {\n      const response = await baseFetch(input, init);\n      const responseObj = response as { status?: unknown; statusText?: unknown };\n      const status = typeof responseObj.status === \"number\" ? responseObj.status : undefined;\n      const statusText =\n        typeof responseObj.statusText === \"string\" ? responseObj.statusText : undefined;\n\n      logCustomAIDebug(\"CustomAI fetch completed\", {\n        requestId,\n        status,\n        statusText,\n        ...diagnostics,\n      });\n\n      return response;\n    } catch (error) {\n      logCustomAIWarning(\"CustomAI fetch failed\", {\n        requestId,\n        ...diagnostics,\n        ...extractErrorDiagnostics(error),\n      });\n      throw error;\n    }\n  };\n\n  fetchWrapperCache.set(baseFetch, wrapped);\n  logCustomAIDebug(\"Enabled CustomAI fetch diagnostics for runtime fetch implementation\");\n  return wrapped;\n};\n\nconst resolveFetchImplementation = (\n  opts: CustomAIOptions,\n  runtimeFetch: unknown,\n): GenericFetch | undefined => {\n  const providedFetch = typeof opts.fetch === \"function\" ? (opts.fetch as GenericFetch) : undefined;\n  if (providedFetch) {\n    return providedFetch;\n  }\n\n  return typeof runtimeFetch === \"function\" ? (runtimeFetch as GenericFetch) : undefined;\n};\n\nconst createCertificateLoadSummary = (): CertificateLoadSummary => ({\n  fileCount: 0,\n  directoryCertificateCount: 0,\n  directoriesSearched: [],\n  directoriesWithCertificates: [],\n  defaultDirectoriesApplied: [],\n  envDirectoriesApplied: [],\n});\n\nconst collectCertificatesFromDirectory = (\n  directoryPath: string,\n  source: \"env\" | \"default\",\n  certificates: Array<string | Buffer>,\n  summary: CertificateLoadSummary,\n  processedDirectories: Set<string>,\n): void => {\n  const resolvedPath = resolve(directoryPath);\n  const normalizedPath = resolvedPath.replace(/\\\\+/g, \"/\");\n\n  if (processedDirectories.has(normalizedPath)) {\n    return;\n  }\n\n  processedDirectories.add(normalizedPath);\n  summary.directoriesSearched.push(normalizedPath);\n\n  if (!existsSync(resolvedPath)) {\n    logCustomAIDebug(\"CustomAI certificate directory not found\", {\n      directory: normalizedPath,\n      source,\n    });\n    return;\n  }\n\n  let stats: ReturnType<typeof statSync>;\n  try {\n    stats = statSync(resolvedPath);\n  } catch (error) {\n    logCustomAIWarning(\"Failed to inspect CustomAI certificate directory\", {\n      directory: normalizedPath,\n      source,\n      error: error instanceof Error ? error.message : String(error),\n    });\n    return;\n  }\n\n  if (!stats.isDirectory()) {\n    logCustomAIWarning(\"CustomAI certificate path is not a directory\", {\n      directory: normalizedPath,\n      source,\n    });\n    return;\n  }\n\n  let loadedFromDirectory = 0;\n  try {\n    const entries = readdirSync(resolvedPath, { withFileTypes: true });\n    for (const entry of entries) {\n      if (!entry.isFile()) {\n        continue;\n      }\n\n      const extension = extname(entry.name).toLowerCase();\n      if (!CERTIFICATE_FILE_EXTENSIONS.has(extension)) {\n        continue;\n      }\n\n      const entryPath = resolve(resolvedPath, entry.name);\n      try {\n        const contents = readFileSync(entryPath);\n        certificates.push(contents);\n        loadedFromDirectory += 1;\n      } catch (error) {\n        logCustomAIWarning(\"Failed to read CustomAI certificate file\", {\n          path: entryPath,\n          directory: normalizedPath,\n          source,\n          error: error instanceof Error ? error.message : String(error),\n        });\n      }\n    }\n  } catch (error) {\n    logCustomAIWarning(\"Failed to enumerate CustomAI certificate directory\", {\n      directory: normalizedPath,\n      source,\n      error: error instanceof Error ? error.message : String(error),\n    });\n    return;\n  }\n\n  if (loadedFromDirectory > 0) {\n    summary.directoryCertificateCount += loadedFromDirectory;\n    summary.fileCount += loadedFromDirectory;\n    summary.directoriesWithCertificates.push(normalizedPath);\n    if (source === \"default\") {\n      summary.defaultDirectoriesApplied.push(normalizedPath);\n    } else {\n      summary.envDirectoriesApplied.push(normalizedPath);\n    }\n  }\n\n  logCustomAIDebug(\"Processed CustomAI certificate directory\", {\n    directory: normalizedPath,\n    source,\n    loadedCertificates: loadedFromDirectory,\n  });\n};\n\nconst normalizeCertificateInput = (\n  value: CertificateInput,\n): Array<string | Buffer> | undefined => {\n  if (!value) {\n    return undefined;\n  }\n\n  return Array.isArray(value) ? value : [value];\n};\n\nconst loadCertificatesFromEnv = (): CertificateLoadResult => {\n  const certificates: Array<string | Buffer> = [];\n  const summary = createCertificateLoadSummary();\n  const processedDirectories = new Set<string>();\n  const inlineCertificates = getEnvVar(\"CUSTOMAI_CA_BUNDLE\");\n  let hadInlineCertificates = false;\n\n  if (inlineCertificates) {\n    certificates.push(inlineCertificates);\n    hadInlineCertificates = true;\n  }\n\n  const bundlePathRaw = getEnvVar(\"CUSTOMAI_CA_BUNDLE_PATH\");\n\n  if (bundlePathRaw) {\n    const segments = bundlePathRaw\n      .split(delimiter)\n      .map((entry) => entry.trim())\n      .filter((entry) => entry.length > 0);\n\n    for (const segment of segments) {\n      const resolvedPath = resolve(segment);\n      if (!existsSync(resolvedPath)) {\n        logCustomAIWarning(\"CustomAI CA bundle path does not exist\", { path: resolvedPath });\n        continue;\n      }\n\n      try {\n        const stats = statSync(resolvedPath);\n        if (stats.isDirectory()) {\n          collectCertificatesFromDirectory(resolvedPath, \"env\", certificates, summary, processedDirectories);\n        } else {\n          const contents = readFileSync(resolvedPath);\n          certificates.push(contents);\n          summary.fileCount += 1;\n        }\n      } catch (error) {\n        logCustomAIWarning(\"Failed to read CustomAI CA bundle file\", {\n          path: resolvedPath,\n          error: error instanceof Error ? error.message : String(error),\n        });\n      }\n    }\n  }\n\n  const directoriesFromEnv = getEnvVar(\"CUSTOMAI_CA_BUNDLE_DIRS\");\n  if (directoriesFromEnv) {\n    directoriesFromEnv\n      .split(delimiter)\n      .map((entry) => entry.trim())\n      .filter((entry) => entry.length > 0)\n      .forEach((entry) =>\n        collectCertificatesFromDirectory(entry, \"env\", certificates, summary, processedDirectories),\n      );\n  }\n\n  const extensionRoot = resolve(__dirname, \"../../\");\n  const defaultDirectoryCandidates = new Set<string>();\n  for (const directory of DEFAULT_CERTIFICATE_DIRECTORIES) {\n    defaultDirectoryCandidates.add(resolve(extensionRoot, directory));\n    defaultDirectoryCandidates.add(resolve(directory));\n  }\n\n  for (const directory of defaultDirectoryCandidates) {\n    collectCertificatesFromDirectory(directory, \"default\", certificates, summary, processedDirectories);\n  }\n\n  const finalCertificates = certificates.length > 0 ? certificates : undefined;\n\n  return {\n    certificates: finalCertificates,\n    fileCount: summary.fileCount,\n    directoryCertificateCount: summary.directoryCertificateCount,\n    hadInlineCertificates,\n    directoriesSearched: summary.directoriesSearched,\n    directoriesWithCertificates: summary.directoriesWithCertificates,\n    defaultDirectoriesApplied: summary.defaultDirectoriesApplied,\n    envDirectoriesApplied: summary.envDirectoriesApplied,\n  };\n};\n\nconst configureUndiciDispatcher = (\n  opts: {\n    disableSSLVerification: boolean;\n    caCertificates?: Array<string | Buffer>;\n  },\n  context: { alreadyConfigured: boolean },\n): boolean => {\n  if (context.alreadyConfigured) {\n    return true;\n  }\n\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-unsafe-assignment\n    const undici: typeof import(\"undici\") = require(\"undici\");\n    if (typeof undici?.setGlobalDispatcher !== \"function\" || typeof undici?.Agent !== \"function\") {\n      logCustomAIWarning(\"Undici dispatcher hooks unavailable for CustomAI TLS overrides\");\n      return false;\n    }\n\n    type UndiciAgent = typeof undici.Agent;\n    type UndiciAgentOptions = NonNullable<ConstructorParameters<UndiciAgent>[0]>;\n\n    const connectOptions: NonNullable<UndiciAgentOptions[\"connect\"]> = {\n      rejectUnauthorized: !opts.disableSSLVerification,\n    };\n\n    if (opts.caCertificates?.length) {\n      type ConnectOptions = NonNullable<UndiciAgentOptions[\"connect\"]>;\n      connectOptions.ca = opts.caCertificates as NonNullable<ConnectOptions[\"ca\"]>;\n    }\n\n    const agentOptions: UndiciAgentOptions = {\n      connect: connectOptions,\n    };\n\n    const dispatcher = new undici.Agent(agentOptions);\n    undici.setGlobalDispatcher(dispatcher);\n\n    logCustomAIDebug(\"Configured undici TLS dispatcher for CustomAI\", {\n      rejectUnauthorized: connectOptions.rejectUnauthorized,\n      hasCustomCA: !!connectOptions.ca,\n    });\n\n    return true;\n  } catch (error) {\n    logCustomAIWarning(\"Failed to configure undici TLS dispatcher for CustomAI\", {\n      error: error instanceof Error ? error.message : String(error),\n    });\n    return false;\n  }\n};\n\nlet undiciDispatcherConfigured = false;\n\nconst resolveNodeAgentOptions = (opts: {\n  disableSSLVerification: boolean;\n  caCertificates?: Array<string | Buffer>;\n  providedHttpsAgent?: ClientOptions[\"httpsAgent\"];\n}): { httpAgent?: ClientOptions[\"httpAgent\"]; httpsAgent?: ClientOptions[\"httpsAgent\"] } => {\n  if (opts.providedHttpsAgent) {\n    logCustomAIDebug(\"Using caller-provided HTTPS agent for CustomAI\");\n    return {};\n  }\n\n  const agentOptions: ConstructorParameters<typeof HttpsAgent>[0] = {\n    rejectUnauthorized: !opts.disableSSLVerification,\n  };\n\n  if (opts.caCertificates?.length) {\n    agentOptions.ca = opts.caCertificates;\n  }\n\n  const httpsAgent = new HttpsAgent(agentOptions);\n\n  const dispatcherResult = configureUndiciDispatcher(\n    {\n      disableSSLVerification: opts.disableSSLVerification,\n      caCertificates: opts.caCertificates,\n    },\n    { alreadyConfigured: undiciDispatcherConfigured },\n  );\n\n  if (dispatcherResult) {\n    undiciDispatcherConfigured = true;\n  }\n\n  logCustomAIDebug(\"Constructed CustomAI HTTPS agent\", {\n    rejectUnauthorized: agentOptions.rejectUnauthorized,\n    hasCustomCA: !!agentOptions.ca,\n    undiciDispatcherConfigured: dispatcherResult,\n  });\n\n  return {\n    httpAgent: httpsAgent,\n    httpsAgent,\n  };\n};\n\nconst getRequestDebugInfo = (\n  opts: FinalRequestOptions,\n): { path?: string; method?: string } => {\n  const record = opts as Record<string, unknown>;\n  const path = typeof record.path === \"string\" ? record.path : undefined;\n  const method = typeof record.method === \"string\" ? record.method : undefined;\n  return { path, method };\n};\n\nexport * from \"../model\";\n\nexport class CustomAI extends OpenAI {\n  protected azureAuthToken: string | null = null;\n  public static readonly defaultScope = requireEnvVar(\"CUSTOMAI_DEFAULT_SCOPE\");\n\n  public declare models: CustomAIModels;\n\n  constructor(opts: CustomAIOptions = {}) {\n    const globalRef = typeof globalThis === \"object\" ? (globalThis as Record<string, unknown>) : {};\n    const isBrowser = typeof globalRef.window !== \"undefined\";\n    logCustomAIDebug(\"Constructing CustomAI client\", {\n      runtime: isBrowser ? \"browser\" : \"node\",\n      hasFetch: typeof globalRef.fetch === \"function\",\n      hasWindow: isBrowser,\n    });\n    const browserOptions = isBrowser\n      ? {\n          httpAgent: undefined,\n          httpsAgent: undefined,\n        }\n      : {};\n\n    const disableSSLVerificationEnv = getEnvVarBoolean(\"CUSTOMAI_ALLOW_SELF_SIGNED_CERTS\");\n    const disableAutoCertLoadingEnv = getEnvVarBoolean(\"CUSTOMAI_DISABLE_AUTO_CERT_LOADING\");\n\n    const disableSSLVerification =\n      opts.disableSSLVerification ?? (disableSSLVerificationEnv ?? false);\n    const disableAutoCertLoading =\n      opts.disableAutoCertLoading ?? (disableAutoCertLoadingEnv ?? false);\n\n    const providedCertificates = normalizeCertificateInput(opts.caCertificates);\n    const providedCertificateCount = providedCertificates?.length ?? 0;\n    let caCertificates = providedCertificates;\n    const envCertificates = disableAutoCertLoading ? undefined : loadCertificatesFromEnv();\n\n    if (envCertificates?.certificates?.length) {\n      caCertificates = [...(caCertificates ?? []), ...envCertificates.certificates];\n    }\n\n    const usingCertificates = caCertificates?.length ?? 0;\n\n    const nodeAgentOptions = !isBrowser\n      ? resolveNodeAgentOptions({\n          disableSSLVerification,\n          caCertificates,\n          providedHttpsAgent: opts.httpsAgent,\n        })\n      : {};\n\n    const runtimeFetch =\n      typeof globalRef.fetch === \"function\" ? (globalRef.fetch as GenericFetch) : undefined;\n    const baseFetch = resolveFetchImplementation(opts, runtimeFetch);\n    const diagnosticFetch = createDiagnosticFetch(baseFetch);\n\n    if (!baseFetch && !diagnosticFetch && !fetchDiagnosticsWarningIssued) {\n      logCustomAIWarning(\n        \"CustomAI fetch diagnostics unavailable; runtime did not expose a fetch implementation to wrap.\",\n      );\n      fetchDiagnosticsWarningIssued = true;\n    }\n\n    const fetchOption = diagnosticFetch\n      ? { fetch: diagnosticFetch }\n      : baseFetch\n        ? { fetch: baseFetch }\n        : {};\n\n    logCustomAIDebug(\"Resolved CustomAI fetch implementation\", {\n      hasBaseFetch: !!baseFetch,\n      diagnosticsWrapped: !!diagnosticFetch,\n    });\n\n    logCustomAIDebug(\"Resolved CustomAI TLS configuration\", {\n      disableSSLVerification,\n      disableAutoCertLoading,\n      providedCertificates: providedCertificateCount,\n      envCertificateFiles: envCertificates?.fileCount ?? 0,\n      envInlineCertificates: envCertificates?.hadInlineCertificates ?? false,\n      envDirectoryCertificates: envCertificates?.directoryCertificateCount ?? 0,\n      certificateDirectoriesSearched: envCertificates?.directoriesSearched ?? [],\n      certificateDirectoriesWithCerts: envCertificates?.directoriesWithCertificates ?? [],\n      defaultCertificateDirectoriesApplied: envCertificates?.defaultDirectoriesApplied ?? [],\n      envCertificateDirectoriesApplied: envCertificates?.envDirectoriesApplied ?? [],\n      finalCertificateCount: usingCertificates,\n      usingProvidedHttpsAgent: !!opts.httpsAgent,\n      applyingNodeAgentOptions: !isBrowser,\n    });\n\n    const apiKey = opts.apiKey ?? getEnvVar(\"CUSTOMAI_API_KEY\", \"customai_dummy\");\n    const timeout = opts.timeout ?? getEnvVarNumber(\"CUSTOMAI_TIMEOUT\", 30000);\n    const maxRetries = opts.maxRetries ?? getEnvVarNumber(\"CUSTOMAI_MAX_RETRIES\", 3);\n    const baseURL = opts.baseURL ?? getEnvVar(\"CUSTOMAI_BASE_URL\");\n    const dangerouslyAllowBrowser =\n      opts.dangerouslyAllowBrowser ?? getEnvVarBoolean(\"CUSTOMAI_ALLOW_BROWSER\", true);\n\n    logCustomAIDebug(\"Resolved CustomAI constructor options\", {\n      baseURL,\n      timeout,\n      maxRetries,\n      dangerouslyAllowBrowser,\n      apiKey: redactSecret(apiKey),\n      defaultScope: CustomAI.defaultScope,\n    });\n\n    super({\n      ...opts,\n      ...browserOptions,\n      ...nodeAgentOptions,\n      ...fetchOption,\n      apiKey,\n      timeout,\n      maxRetries,\n      baseURL,\n      dangerouslyAllowBrowser,\n    });\n\n    const baseModels = (this as OpenAI).models;\n\n    Object.defineProperty(this, \"models\", {\n      value: new CustomAIModels(baseModels),\n      writable: false,\n      configurable: false,\n    });\n\n    logCustomAIDebug(\"CustomAI client initialized\");\n  }\n\n  setAzureAuthToken(token: string) {\n    this.azureAuthToken = token;\n    logCustomAIDebug(\"Azure auth token updated\", {\n      hasToken: !!token,\n      tokenLength: token?.length ?? 0,\n    });\n  }\n\n  protected override authHeaders(opts: FinalRequestOptions): Record<string, string | null | undefined> {\n    if (this.azureAuthToken) {\n      logCustomAIDebug(\"Applying Azure auth header override\", getRequestDebugInfo(opts));\n      return { Authorization: `Bearer ${this.azureAuthToken}` };\n    }\n    const headers = super.authHeaders(opts);\n    logCustomAIDebug(\"Using default auth headers\", getRequestDebugInfo(opts));\n    return headers;\n  }\n\n  protected override defaultHeaders(opts: FinalRequestOptions): Record<string, string | null | undefined> {\n    const headers = super.defaultHeaders(opts) as Record<string, string | null | undefined>;\n    const requestInfo = getRequestDebugInfo(opts);\n    if (this.azureAuthToken) {\n      delete headers[\"OpenAI-Organization\"];\n      delete headers[\"OpenAI-Project\"];\n      logCustomAIDebug(\"Removed OpenAI-specific headers due to Azure auth token\", requestInfo);\n    }\n    logCustomAIDebug(\"Computed default headers\", {\n      hasAzureToken: !!this.azureAuthToken,\n      headerKeys: Object.keys(headers ?? {}),\n      ...requestInfo,\n    });\n    return headers;\n  }\n}\n\nexport const __customAITestHooks = {\n  loadCertificatesFromEnvForTest: (): CertificateLoadResult => loadCertificatesFromEnv(),\n  createDiagnosticFetchForTest: (baseFetch?: GenericFetch): GenericFetch | undefined =>\n    createDiagnosticFetch(baseFetch),\n};\n"]}