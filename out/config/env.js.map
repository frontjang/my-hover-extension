{"version":3,"file":"env.js","sourceRoot":"","sources":["../../src/config/env.ts"],"names":[],"mappingssourcesContent":["import { existsSync, readFileSync } from \"fs\";\nimport { resolve } from \"path\";\n\nlet envFileLoaded = false;\nconst envFileValues: Record<string, string> = {};\n\nconst parseEnvValue = (rawValue: string): string => {\n  const withoutCarriageReturn = rawValue.replace(/\\r$/, \"\");\n  const value = withoutCarriageReturn.trim();\n\n  if (value.length === 0) {\n    return \"\";\n  }\n\n  const firstChar = value[0];\n  const lastChar = value[value.length - 1];\n\n  if ((firstChar === '\"' && lastChar === '\"') || (firstChar === \"'\" && lastChar === \"'\")) {\n    const inner = value.slice(1, -1);\n    return inner.replace(/\\\\n/g, \"\\n\").replace(/\\\\r/g, \"\\r\");\n  }\n\n  return value;\n};\n\nconst loadEnvFile = (): void => {\n  if (envFileLoaded) {\n    return;\n  }\n\n  envFileLoaded = true;\n\n  const envPath = resolve(__dirname, \"../../.env\");\n\n  if (!existsSync(envPath)) {\n    return;\n  }\n\n  const contents = readFileSync(envPath, \"utf8\");\n\n  for (const rawLine of contents.split(/\\r?\\n/)) {\n    if (!rawLine) {\n      continue;\n    }\n\n    const trimmedLine = rawLine.trim();\n\n    if (trimmedLine.length === 0 || trimmedLine.startsWith(\"#\")) {\n      continue;\n    }\n\n    const separatorIndex = rawLine.indexOf(\"=\");\n\n    if (separatorIndex === -1) {\n      continue;\n    }\n\n    let key = rawLine.slice(0, separatorIndex).trim();\n\n    if (key.startsWith(\"export \")) {\n      key = key.slice(\"export \".length).trim();\n    }\n\n    if (!key) {\n      continue;\n    }\n\n    const value = parseEnvValue(rawLine.slice(separatorIndex + 1));\n\n    envFileValues[key] = value;\n\n    if (process.env[key] === undefined) {\n      process.env[key] = value;\n    }\n  }\n};\n\nexport const getEnvVar = (name: string, fallback?: string): string | undefined => {\n  loadEnvFile();\n\n  const envValue = process.env[name] ?? envFileValues[name];\n\n  if (envValue === undefined || envValue === \"\") {\n    return fallback;\n  }\n\n  return envValue;\n};\n\nexport const requireEnvVar = (name: string): string => {\n  const value = getEnvVar(name);\n  if (value === undefined) {\n    throw new Error(`Missing required environment variable: ${name}`);\n  }\n  return value;\n};\n\nexport const getEnvVarNumber = (name: string, fallback?: number): number | undefined => {\n  const value = getEnvVar(name);\n  if (value === undefined) {\n    return fallback;\n  }\n  const parsed = Number(value);\n  return Number.isFinite(parsed) ? parsed : fallback;\n};\n\nexport const getEnvVarBoolean = (name: string, fallback?: boolean): boolean | undefined => {\n  const value = getEnvVar(name);\n  if (value === undefined) {\n    return fallback;\n  }\n  switch (value.toLowerCase()) {\n    case \"true\":\n    case \"1\":\n    case \"yes\":\n      return true;\n    case \"false\":\n    case \"0\":\n    case \"no\":\n      return false;\n    default:\n      return fallback;\n  }\n};\n"]}