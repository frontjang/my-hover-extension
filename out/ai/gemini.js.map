{"version":3,"file":"gemini.js","sourceRoot":"","sources":["../../src/ai/gemini.ts"],"names":[],"mappings":"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","sourcesContent":["import * as http from 'http';\nimport * as https from 'https';\nimport * as vscode from 'vscode';\n\ninterface GeminiCandidate {\n  content?: {\n    parts?: { text?: string }[];\n  };\n}\n\ninterface GeminiResponse {\n  candidates?: GeminiCandidate[];\n}\n\nexport interface GeminiExplanationResult {\n  text?: string;\n  error?: string;\n}\n\nfunction coerceGeminiErrorMessage(statusCode: number | undefined, body: string): string {\n  if (!body) {\n    return `Gemini request failed with status ${statusCode ?? 'unknown'}.`;\n  }\n\n  try {\n    const parsed = JSON.parse(body) as { error?: { message?: string } };\n    const message = parsed.error?.message?.trim();\n\n    if (message) {\n      return `Gemini request failed with status ${statusCode ?? 'unknown'}: ${message}`;\n    }\n  } catch (parseError) {\n    // Ignore JSON parsing issues and fall back to the raw body below.\n  }\n\n  const sanitized = body.length > 500 ? `${body.slice(0, 497)}...` : body;\n  return `Gemini request failed with status ${statusCode ?? 'unknown'}: ${sanitized.trim() || 'Unknown error.'}`;\n}\n\nexport async function fetchGeminiExplanation(\n  prompt: string,\n  baseEndpoint: string,\n  model: string,\n  apiKey: string,\n  token: vscode.CancellationToken\n): Promise<GeminiExplanationResult> {\n  if (!prompt.trim()) {\n    return { error: 'Prompt text was empty.' };\n  }\n\n  if (!baseEndpoint) {\n    return { error: 'Gemini endpoint is not configured.' };\n  }\n\n  if (!model) {\n    return { error: 'Gemini model is not configured.' };\n  }\n\n  if (!apiKey) {\n    return { error: 'Gemini API key is not configured.' };\n  }\n\n  const payload = JSON.stringify({\n    contents: [\n      {\n        role: 'user',\n        parts: [{ text: prompt }]\n      }\n    ]\n  });\n\n  const url = new URL(`${baseEndpoint.replace(/\\/$/, '')}/${model}:generateContent`);\n\n  return new Promise<GeminiExplanationResult>((resolve) => {\n    if (url.protocol !== 'http:' && url.protocol !== 'https:') {\n      resolve({ error: 'Gemini endpoint must use HTTP or HTTPS.' });\n      return;\n    }\n\n    const transport = url.protocol === 'http:' ? http : https;\n\n    const req = transport.request(\n      url,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-Length': Buffer.byteLength(payload),\n          'X-Goog-Api-Key': apiKey\n        }\n      },\n      (res) => {\n        const chunks: Buffer[] = [];\n\n        res.on('data', (chunk) => {\n          chunks.push(chunk instanceof Buffer ? chunk : Buffer.from(chunk));\n        });\n\n        res.on('end', () => {\n          const body = Buffer.concat(chunks).toString('utf8');\n\n          if (res.statusCode && res.statusCode >= 200 && res.statusCode < 300) {\n            try {\n              const json = JSON.parse(body) as GeminiResponse;\n              const candidate = json.candidates?.find((c) => c.content?.parts?.length);\n              const text = candidate?.content?.parts\n                ?.map((part) => part.text ?? '')\n                .join('\\n')\n                .trim();\n\n              resolve(text ? { text } : { error: 'Gemini returned an empty response.' });\n            } catch (error) {\n              console.error('[MyHoverExtension] Failed to parse Gemini response:', error);\n              const message = error instanceof Error ? error.message : 'Unknown parsing error.';\n              resolve({ error: `Failed to parse Gemini response: ${message}` });\n            }\n          } else {\n            console.error(\n              `[MyHoverExtension] Gemini request failed with status ${res.statusCode}: ${body}`\n            );\n            resolve({ error: coerceGeminiErrorMessage(res.statusCode, body) });\n          }\n        });\n      }\n    );\n\n    req.on('error', (error) => {\n      if (!token.isCancellationRequested) {\n        console.error('[MyHoverExtension] Gemini request error:', error);\n      }\n      const message = error instanceof Error ? error.message : String(error);\n      resolve({ error: `Gemini request error: ${message}` });\n    });\n\n    token.onCancellationRequested(() => {\n      req.destroy(new Error('Cancelled'));\n      resolve({ error: 'Gemini request was cancelled.' });\n    });\n\n    req.write(payload);\n    req.end();\n  });\n}\n"]}