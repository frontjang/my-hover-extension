{"version":3,"file":"explanations.js","sourceRoot":"","sources":["../../src/ai/explanations.ts"],"names":[],"mappings":"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","sourcesContent":["import * as vscode from 'vscode';\nimport { LineProcessorRegistry } from '../prompts/registry';\nimport { buildPromptPayload } from '../prompts/builder';\nimport { recordPromptSession } from '../promptSessions';\nimport { ChatMessage, ProviderConfig, ProviderSelection } from './types';\nimport { fetchGeminiExplanation } from './gemini';\nimport { fetchOpenAIStyleExplanation } from './openai';\n\nexport interface ProviderExplanationResult {\n  text?: string;\n  error?: string;\n}\n\nexport async function resolveGeminiExplanation(\n  hoveredWord: string,\n  lineText: string | undefined,\n  providerConfig: ProviderConfig,\n  registry: LineProcessorRegistry,\n  token: vscode.CancellationToken\n): Promise<ProviderExplanationResult> {\n  const promptPayload = await buildPromptPayload(hoveredWord, lineText, providerConfig, registry);\n  const geminiPrompt = promptPayload.systemPrompt\n    ? `${promptPayload.systemPrompt}\\n\\n${promptPayload.userPrompt}`\n    : promptPayload.userPrompt;\n  const requestBody = {\n    contents: [\n      {\n        role: 'user',\n        parts: [{ text: geminiPrompt }]\n      }\n    ]\n  };\n\n  const explanation = await fetchGeminiExplanation(\n    geminiPrompt,\n    providerConfig.geminiEndpoint,\n    providerConfig.geminiModel,\n    providerConfig.geminiApiKey,\n    token\n  );\n\n  recordPromptSession({\n    provider: 'gemini',\n    endpoint: providerConfig.geminiEndpoint,\n    model: providerConfig.geminiModel,\n    hoveredWord,\n    lineText,\n    systemPrompt: promptPayload.systemPrompt,\n    userPrompt: promptPayload.userPrompt,\n    renderedPrompt: geminiPrompt,\n    requestPayload: JSON.stringify(requestBody, null, 2),\n    responseText: explanation.text,\n    responseError: explanation.error,\n    timestamp: Date.now()\n  });\n\n  return explanation;\n}\n\nexport async function resolveOpenAIStyleExplanation(\n  hoveredWord: string,\n  lineText: string | undefined,\n  providerConfig: ProviderConfig,\n  registry: LineProcessorRegistry,\n  endpoint: string,\n  apiKey: string,\n  model: string,\n  provider: ProviderSelection,\n  token: vscode.CancellationToken\n): Promise<ProviderExplanationResult> {\n  const promptPayload = await buildPromptPayload(hoveredWord, lineText, providerConfig, registry);\n  const messages: ChatMessage[] = [];\n\n  if (promptPayload.systemPrompt) {\n    messages.push({ role: 'system', content: promptPayload.systemPrompt });\n  }\n\n  messages.push({ role: 'user', content: promptPayload.userPrompt });\n\n  const explanation = await fetchOpenAIStyleExplanation(\n    messages,\n    endpoint,\n    apiKey,\n    model,\n    token,\n    provider\n  );\n\n  const renderedPrompt = messages\n    .map((message) => `${message.role.toUpperCase()}: ${message.content}`)\n    .join('\\n\\n');\n\n  recordPromptSession({\n    provider,\n    endpoint,\n    model,\n    hoveredWord,\n    lineText,\n    systemPrompt: promptPayload.systemPrompt,\n    userPrompt: promptPayload.userPrompt,\n    renderedPrompt,\n    requestPayload: JSON.stringify({ model, messages }, null, 2),\n    responseText: explanation.text,\n    responseError: explanation.error,\n    timestamp: Date.now()\n  });\n\n  return explanation;\n}\n"]}