{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/ai/types.ts"],"names":[],"mappings":";;;AAgCA,8CA4BC;AAlCY,QAAA,eAAe,GAAsC;IAChE,MAAM,EAAE,QAAQ;IAChB,MAAM,EAAE,QAAQ;IAChB,MAAM,EAAE,0BAA0B;CACnC,CAAC;AAEF,SAAgB,iBAAiB,CAC/B,MAAqC;IAErC,MAAM,QAAQ,GAAG,CAAC,MAAM,CAAC,GAAG,CAAS,UAAU,CAAC,IAAI,QAAQ,CAAsB,CAAC;IAEnF,MAAM,SAAS,GAAG,CAAC,GAAW,EAAE,EAAE;QAChC,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAS,GAAG,CAAC,CAAC;QACtC,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IACnC,CAAC,CAAC;IAEF,OAAO;QACL,QAAQ;QACR,cAAc,EAAE,SAAS,CAAC,gBAAgB,CAAC;QAC3C,WAAW,EAAE,SAAS,CAAC,aAAa,CAAC;QACrC,YAAY,EAAE,SAAS,CAAC,cAAc,CAAC;QACvC,cAAc,EAAE,SAAS,CAAC,gBAAgB,CAAC;QAC3C,YAAY,EAAE,SAAS,CAAC,cAAc,CAAC;QACvC,WAAW,EAAE,SAAS,CAAC,aAAa,CAAC;QACrC,cAAc,EAAE,SAAS,CAAC,gBAAgB,CAAC;QAC3C,YAAY,EAAE,SAAS,CAAC,cAAc,CAAC;QACvC,WAAW,EAAE,SAAS,CAAC,aAAa,CAAC;QACrC,YAAY,EAAE,MAAM,CAAC,GAAG,CAAS,cAAc,CAAC,IAAI,EAAE;QACtD,kBAAkB,EAChB,MAAM,CAAC,GAAG,CAAS,oBAAoB,CAAC;YACxC,gFAAgF;QAClF,qBAAqB,EAAE,MAAM,CAAC,GAAG,CAAW,uBAAuB,CAAC,IAAI,CAAC,mBAAmB,CAAC;QAC7F,oBAAoB,EAAE,MAAM,CAAC,GAAG,CAAW,sBAAsB,CAAC,IAAI,EAAE;KACzE,CAAC;AACJ,CAAC","sourcesContent":["import * as vscode from 'vscode';\n\nexport type ProviderSelection = 'gemini' | 'openai' | 'custom';\n\nexport interface ProviderConfig {\n  provider: ProviderSelection;\n  geminiEndpoint: string;\n  geminiModel: string;\n  geminiApiKey: string;\n  openAiEndpoint: string;\n  openAiApiKey: string;\n  openAiModel: string;\n  customEndpoint: string;\n  customApiKey: string;\n  customModel: string;\n  systemPrompt: string;\n  basePromptTemplate: string;\n  lineContextAugmenters: string[];\n  referenceSearchRoots: string[];\n}\n\nexport type ChatMessage = {\n  role: 'system' | 'user';\n  content: string;\n};\n\nexport const PROVIDER_LABELS: Record<ProviderSelection, string> = {\n  gemini: 'Gemini',\n  openai: 'OpenAI',\n  custom: 'Custom OpenAI-compatible'\n};\n\nexport function getProviderConfig(\n  config: vscode.WorkspaceConfiguration\n): ProviderConfig {\n  const provider = (config.get<string>('provider') ?? 'gemini') as ProviderSelection;\n\n  const getString = (key: string) => {\n    const value = config.get<string>(key);\n    return value ? value.trim() : '';\n  };\n\n  return {\n    provider,\n    geminiEndpoint: getString('geminiEndpoint'),\n    geminiModel: getString('geminiModel'),\n    geminiApiKey: getString('geminiApiKey'),\n    openAiEndpoint: getString('openAiEndpoint'),\n    openAiApiKey: getString('openAiApiKey'),\n    openAiModel: getString('openAiModel'),\n    customEndpoint: getString('customEndpoint'),\n    customApiKey: getString('customApiKey'),\n    customModel: getString('customModel'),\n    systemPrompt: config.get<string>('systemPrompt') ?? '',\n    basePromptTemplate:\n      config.get<string>('basePromptTemplate') ??\n      \"Explain the word '{{word}}' in plain language. It was in the line: '{{line}}'.\",\n    lineContextAugmenters: config.get<string[]>('lineContextAugmenters') ?? ['fileLineReference'],\n    referenceSearchRoots: config.get<string[]>('referenceSearchRoots') ?? []\n  };\n}\n"]}