{"version":3,"file":"CustomAI.js","sourceRoot":"","sources":["../../src/ai/CustomAI.ts"],"names":[],"mappings":"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","sourcesContent":["import OpenAI from \"openai\";\nimport type { Buffer } from \"node:buffer\";\nimport type { ClientOptions } from \"openai\";\nimport type { FinalRequestOptions } from \"openai/core\";\n\nimport { CustomAIModels } from \"../model\";\nimport { getEnvVar, getEnvVarBoolean, getEnvVarNumber, requireEnvVar } from \"../config/env\";\nimport { logCustomAIDebug, redactSecret } from \"./customAiDebug\";\n\nexport interface CustomAIOptions extends ClientOptions {\n  disableSSLVerification?: boolean;\n  caCertificates?: string | Buffer | Array<string | Buffer>;\n  disableAutoCertLoading?: boolean;\n}\n\nexport * from \"../model\";\n\nexport class CustomAI extends OpenAI {\n  protected azureAuthToken: string | null = null;\n  public static readonly defaultScope = requireEnvVar(\"CUSTOMAI_DEFAULT_SCOPE\");\n\n  public declare models: CustomAIModels;\n\n  constructor(opts: CustomAIOptions = {}) {\n    const globalRef = typeof globalThis === \"object\" ? (globalThis as Record<string, unknown>) : {};\n    const isBrowser = typeof globalRef.window !== \"undefined\";\n    logCustomAIDebug(\"Constructing CustomAI client\", {\n      runtime: isBrowser ? \"browser\" : \"node\",\n      hasFetch: typeof globalRef.fetch === \"function\",\n      hasWindow: isBrowser,\n    });\n    const browserOptions = isBrowser\n      ? {\n          httpAgent: undefined,\n          httpsAgent: undefined,\n          fetch: typeof globalRef.fetch === \"function\" ? (globalRef.fetch as typeof fetch) : undefined,\n        }\n      : {};\n\n    const apiKey = opts.apiKey ?? getEnvVar(\"CUSTOMAI_API_KEY\", \"customai_dummy\");\n    const timeout = opts.timeout ?? getEnvVarNumber(\"CUSTOMAI_TIMEOUT\", 30000);\n    const maxRetries = opts.maxRetries ?? getEnvVarNumber(\"CUSTOMAI_MAX_RETRIES\", 3);\n    const baseURL = opts.baseURL ?? getEnvVar(\"CUSTOMAI_BASE_URL\");\n    const dangerouslyAllowBrowser =\n      opts.dangerouslyAllowBrowser ?? getEnvVarBoolean(\"CUSTOMAI_ALLOW_BROWSER\", true);\n\n    logCustomAIDebug(\"Resolved CustomAI constructor options\", {\n      baseURL,\n      timeout,\n      maxRetries,\n      dangerouslyAllowBrowser,\n      apiKey: redactSecret(apiKey),\n      defaultScope: CustomAI.defaultScope,\n    });\n\n    super({\n      ...opts,\n      ...browserOptions,\n      apiKey,\n      timeout,\n      maxRetries,\n      baseURL,\n      dangerouslyAllowBrowser,\n    });\n\n    const baseModels = (this as OpenAI).models;\n\n    Object.defineProperty(this, \"models\", {\n      value: new CustomAIModels(baseModels),\n      writable: false,\n      configurable: false,\n    });\n\n    logCustomAIDebug(\"CustomAI client initialized\");\n  }\n\n  setAzureAuthToken(token: string) {\n    this.azureAuthToken = token;\n    logCustomAIDebug(\"Azure auth token updated\", {\n      hasToken: !!token,\n      tokenLength: token?.length ?? 0,\n    });\n  }\n\n  protected override authHeaders(opts: FinalRequestOptions): Record<string, string | null | undefined> {\n    if (this.azureAuthToken) {\n      logCustomAIDebug(\"Applying Azure auth header override\", {\n        path: opts.path,\n        method: opts.method,\n      });\n      return { Authorization: `Bearer ${this.azureAuthToken}` };\n    }\n    const headers = super.authHeaders(opts);\n    logCustomAIDebug(\"Using default auth headers\", {\n      path: opts.path,\n      method: opts.method,\n    });\n    return headers;\n  }\n\n  protected override defaultHeaders(opts: FinalRequestOptions): Record<string, string | null | undefined> {\n    const headers = super.defaultHeaders(opts) as Record<string, string | null | undefined>;\n    if (this.azureAuthToken) {\n      delete headers[\"OpenAI-Organization\"];\n      delete headers[\"OpenAI-Project\"];\n      logCustomAIDebug(\"Removed OpenAI-specific headers due to Azure auth token\", {\n        path: opts.path,\n        method: opts.method,\n      });\n    }\n    logCustomAIDebug(\"Computed default headers\", {\n      hasAzureToken: !!this.azureAuthToken,\n      headerKeys: Object.keys(headers ?? {}),\n    });\n    return headers;\n  }\n}\n"]}