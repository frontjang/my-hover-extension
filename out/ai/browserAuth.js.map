{"version":3,"file":"browserAuth.js","sourceRoot":"","sources":["../../src/ai/browserAuth.ts"],"names":[],"mappings":";;;AAAA,sDAA8D;AAS9D,mDAAuE;AAgBvE,MAAa,iBAAiB;IAO5B,YAAY,GAAsB;QAL1B,YAAO,GAAuB,IAAI,CAAC;QAGnC,kBAAa,GAAG,KAAK,CAAC;QAG5B,MAAM,SAAS,GAAG,GAAG,CAAC,SAAS,IAAI,qCAAqC,GAAG,CAAC,QAAQ,OAAO,CAAC;QAC5F,MAAM,MAAM,GAAkB;YAC5B,IAAI,EAAE;gBACJ,QAAQ,EAAE,GAAG,CAAC,QAAQ;gBACtB,SAAS;gBACT,WAAW,EAAE,GAAG,CAAC,WAAW;gBAC5B,qBAAqB,EAAE,GAAG,CAAC,qBAAqB;gBAChD,yBAAyB,EAAE,KAAK;aACjC;YACD,KAAK,EAAE;gBACL,aAAa,EAAE,GAAG,CAAC,aAAa,IAAI,gBAAgB;gBACpD,sBAAsB,EAAE,KAAK;aAC9B;YACD,MAAM,EAAE;gBACN,qBAAqB,EAAE,IAAI;gBAC3B,iBAAiB,EAAE,KAAK;aACzB;SACF,CAAC;QAEF,IAAI,CAAC,IAAI,GAAG,IAAI,sCAAuB,CAAC,MAAM,CAAC,CAAC;QAChD,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC,aAAa,IAAI,EAAE,CAAC;QAC7C,IAAI,CAAC,eAAe,GAAG,GAAG,CAAC,eAAe,IAAI,OAAO,CAAC;QAEtD,IAAA,gCAAgB,EAAC,+BAA+B,EAAE;YAChD,SAAS,EAAE,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;YACxC,WAAW,EAAE,GAAG,CAAC,WAAW;YAC5B,aAAa,EAAE,MAAM,CAAC,KAAK,EAAE,aAAa,IAAI,GAAG,CAAC,aAAa,IAAI,gBAAgB;YACnF,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,eAAe,EAAE,IAAI,CAAC,eAAe;SACtC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,UAAU;QACd,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,IAAA,gCAAgB,EAAC,uCAAuC,CAAC,CAAC;YAC1D,OAAO;QACT,CAAC;QAED,IAAI,CAAC;YACH,IAAA,gCAAgB,EAAC,2CAA2C,CAAC,CAAC;YAC9D,MAAM,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;YAC7B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAC1B,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;YAC5C,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;YACnC,IAAA,gCAAgB,EAAC,8BAA8B,EAAE;gBAC/C,YAAY,EAAE,QAAQ,CAAC,MAAM;gBAC7B,iBAAiB,EAAE,IAAI,CAAC,OAAO,EAAE,QAAQ;aAC1C,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAA,kCAAkB,EAAC,4BAA4B,EAAE;gBAC/C,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;aAC9D,CAAC,CAAC;YACH,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,KAAK,CAAC,mBAAmB;QACvB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;YACxB,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;QAC1B,CAAC;QAED,IAAA,gCAAgB,EAAC,uCAAuC,CAAC,CAAC;QAC1D,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACpD,IAAI,GAAG,EAAE,OAAO,EAAE,CAAC;YACjB,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;YAC3B,IAAA,gCAAgB,EAAC,kCAAkC,EAAE;gBACnD,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;aAChC,CAAC,CAAC;QACL,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YAClB,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;YAC5C,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;YACnC,IAAA,gCAAgB,EAAC,wCAAwC,EAAE;gBACzD,YAAY,EAAE,QAAQ,CAAC,MAAM;gBAC7B,QAAQ,EAAE,IAAI,CAAC,OAAO,EAAE,QAAQ;aACjC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,eAAe;QACb,IAAA,gCAAgB,EAAC,wCAAwC,EAAE;YACzD,eAAe,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO;SAChC,CAAC,CAAC;QACH,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAED,UAAU;QACR,IAAA,gCAAgB,EAAC,qCAAqC,EAAE;YACtD,QAAQ,EAAE,IAAI,CAAC,OAAO,EAAE,QAAQ;SACjC,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,MAAiB;QAClC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;YACxB,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;QAC1B,CAAC;QAED,MAAM,eAAe,GAAG,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;QACrE,IAAA,gCAAgB,EAAC,8BAA8B,EAAE;YAC/C,MAAM,EAAE,eAAe;YACvB,gBAAgB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO;YAChC,eAAe,EAAE,IAAI,CAAC,eAAe;SACtC,CAAC,CAAC;QAEH,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,IAAI,CAAC;gBACH,MAAM,GAAG,GAAkB,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,eAAe,EAAE,CAAC;gBAC9E,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;gBAC7D,IAAA,gCAAgB,EAAC,oCAAoC,EAAE;oBACrD,QAAQ,EAAE,YAAY,CAAC,OAAO,EAAE,QAAQ;oBACxC,SAAS,EAAE,YAAY,CAAC,SAAS,EAAE,WAAW,EAAE;iBACjD,CAAC,CAAC;gBACH,OAAO,YAAY,CAAC;YACtB,CAAC;YAAC,OAAO,WAAW,EAAE,CAAC;gBACrB,IAAA,kCAAkB,EAAC,iCAAiC,EAAE;oBACpD,KAAK,EACH,WAAW,YAAY,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC;iBAC3E,CAAC,CAAC;YACL,CAAC;QACH,CAAC;QAED,MAAM,GAAG,GAAmC,EAAE,MAAM,EAAE,eAAe,EAAE,CAAC;QACxE,IAAI,GAAyB,CAAC;QAC9B,IAAI,IAAI,CAAC,eAAe,KAAK,UAAU,EAAE,CAAC;YACxC,IAAA,gCAAgB,EAAC,iDAAiD,CAAC,CAAC;YACpE,GAAG,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC;QAC/C,CAAC;aAAM,CAAC;YACN,IAAA,gCAAgB,EAAC,8CAA8C,CAAC,CAAC;YACjE,GAAG,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QACxC,CAAC;QACD,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,IAAI,IAAI,CAAC;QACnC,IAAA,gCAAgB,EAAC,+CAA+C,EAAE;YAChE,QAAQ,EAAE,IAAI,CAAC,OAAO,EAAE,QAAQ;YAChC,UAAU,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO;SAC3B,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;IACb,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,MAAiB;QACpC,IAAA,gCAAgB,EAAC,kCAAkC,EAAE;YACnD,MAAM,EAAE,MAAM,IAAI,IAAI,CAAC,aAAa;SACrC,CAAC,CAAC;QACH,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAC5C,IAAA,gCAAgB,EAAC,qCAAqC,EAAE;YACtD,QAAQ,EAAE,CAAC,CAAC,GAAG,CAAC,WAAW;YAC3B,SAAS,EAAE,GAAG,CAAC,SAAS,EAAE,WAAW,EAAE;SACxC,CAAC,CAAC;QACH,OAAO,GAAG,CAAC,WAAW,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,MAAM;QACV,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;YACxB,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;QAC1B,CAAC;QAED,IAAA,gCAAgB,EAAC,yBAAyB,CAAC,CAAC;QAC5C,IAAI,IAAI,CAAC,eAAe,KAAK,UAAU,EAAE,CAAC;YACxC,MAAM,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;QACnC,CAAC;aAAM,CAAC;YACN,MAAM,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QAChC,CAAC;QACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAA,gCAAgB,EAAC,2BAA2B,CAAC,CAAC;IAChD,CAAC;IAEO,KAAK,CAAC,sBAAsB,CAAC,GAAoB,EAAE,SAAS,GAAG,KAAK;QAC1E,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;YACxB,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;QAC1B,CAAC;QAED,IAAI,SAAS,EAAE,CAAC;YACd,IAAA,gCAAgB,EAAC,mCAAmC,CAAC,CAAC;YACtD,MAAM,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;QAC5C,CAAC;aAAM,CAAC;YACN,IAAA,gCAAgB,EAAC,gCAAgC,CAAC,CAAC;YACnD,MAAM,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QACrC,CAAC;QACD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACpD,IAAI,CAAC,GAAG,EAAE,CAAC;YACT,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;QAChF,CAAC;QACD,IAAA,gCAAgB,EAAC,8CAA8C,EAAE;YAC/D,QAAQ,EAAE,GAAG,CAAC,OAAO,EAAE,QAAQ;SAChC,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;IACb,CAAC;CACF;AAnMD,8CAmMC","sourcesContent":["import { PublicClientApplication } from \"@azure/msal-browser\";\nimport type {\n  PopupRequest,\n  RedirectRequest,\n  SilentRequest,\n  Configuration,\n} from \"@azure/msal-browser\";\nimport type { AccountInfo, AuthenticationResult } from \"@azure/msal-browser\";\n\nimport { logCustomAIDebug, logCustomAIWarning } from \"./customAiDebug\";\n\nexport type InteractionType = \"popup\" | \"redirect\";\n\nexport interface BrowserAuthConfig {\n  clientId: string;\n  tenantId: string;\n  authority?: string;\n  redirectUri: string;\n  postLogoutRedirectUri?: string;\n  cacheLocation?: \"localStorage\" | \"sessionStorage\" | \"memoryStorage\";\n  defaultScopes?: string[];\n  interactionType?: InteractionType;\n  loginHint?: string;\n}\n\nexport class BrowserAuthClient {\n  private readonly msal: PublicClientApplication;\n  private account: AccountInfo | null = null;\n  private readonly defaultScopes: string[];\n  private readonly interactionType: InteractionType;\n  private isInitialized = false;\n\n  constructor(cfg: BrowserAuthConfig) {\n    const authority = cfg.authority ?? `https://login.microsoftonline.com/${cfg.tenantId}/v2.0`;\n    const config: Configuration = {\n      auth: {\n        clientId: cfg.clientId,\n        authority,\n        redirectUri: cfg.redirectUri,\n        postLogoutRedirectUri: cfg.postLogoutRedirectUri,\n        navigateToLoginRequestUrl: false,\n      },\n      cache: {\n        cacheLocation: cfg.cacheLocation ?? \"sessionStorage\",\n        storeAuthStateInCookie: false,\n      },\n      system: {\n        allowRedirectInIframe: true,\n        iframeHashTimeout: 10000,\n      },\n    };\n\n    this.msal = new PublicClientApplication(config);\n    this.defaultScopes = cfg.defaultScopes ?? [];\n    this.interactionType = cfg.interactionType ?? \"popup\";\n\n    logCustomAIDebug(\"Initialized BrowserAuthClient\", {\n      authority: authority.replace(/\\/+$/, \"\"),\n      redirectUri: cfg.redirectUri,\n      cacheLocation: config.cache?.cacheLocation ?? cfg.cacheLocation ?? \"sessionStorage\",\n      defaultScopes: this.defaultScopes,\n      interactionType: this.interactionType,\n    });\n  }\n\n  async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      logCustomAIDebug(\"BrowserAuthClient already initialized\");\n      return;\n    }\n\n    try {\n      logCustomAIDebug(\"Initializing MSAL PublicClientApplication\");\n      await this.msal.initialize();\n      this.isInitialized = true;\n      const accounts = this.msal.getAllAccounts();\n      this.account = accounts[0] ?? null;\n      logCustomAIDebug(\"MSAL initialization complete\", {\n        accountCount: accounts.length,\n        authenticatedUser: this.account?.username,\n      });\n    } catch (error) {\n      logCustomAIWarning(\"MSAL initialization failed\", {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  }\n\n  async hydrateFromRedirect(): Promise<void> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    logCustomAIDebug(\"Hydrating CustomAI auth from redirect\");\n    const res = await this.msal.handleRedirectPromise();\n    if (res?.account) {\n      this.account = res.account;\n      logCustomAIDebug(\"Redirect hydration found account\", {\n        username: this.account.username,\n      });\n    }\n    if (!this.account) {\n      const accounts = this.msal.getAllAccounts();\n      this.account = accounts[0] ?? null;\n      logCustomAIDebug(\"Fallback account lookup after redirect\", {\n        accountCount: accounts.length,\n        username: this.account?.username,\n      });\n    }\n  }\n\n  isAuthenticated(): boolean {\n    logCustomAIDebug(\"Checking CustomAI authentication state\", {\n      isAuthenticated: !!this.account,\n    });\n    return !!this.account;\n  }\n\n  getAccount(): AccountInfo | null {\n    logCustomAIDebug(\"Retrieving CustomAI account details\", {\n      username: this.account?.username,\n    });\n    return this.account;\n  }\n\n  async authenticate(scopes?: string[]): Promise<AuthenticationResult> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    const effectiveScopes = scopes?.length ? scopes : this.defaultScopes;\n    logCustomAIDebug(\"Authenticating with CustomAI\", {\n      scopes: effectiveScopes,\n      hasCachedAccount: !!this.account,\n      interactionType: this.interactionType,\n    });\n\n    if (this.account) {\n      try {\n        const req: SilentRequest = { account: this.account, scopes: effectiveScopes };\n        const silentResult = await this.msal.acquireTokenSilent(req);\n        logCustomAIDebug(\"Silent token acquisition succeeded\", {\n          username: silentResult.account?.username,\n          expiresOn: silentResult.expiresOn?.toISOString(),\n        });\n        return silentResult;\n      } catch (silentError) {\n        logCustomAIWarning(\"Silent token acquisition failed\", {\n          error:\n            silentError instanceof Error ? silentError.message : String(silentError),\n        });\n      }\n    }\n\n    const req: PopupRequest & RedirectRequest = { scopes: effectiveScopes };\n    let res: AuthenticationResult;\n    if (this.interactionType === \"redirect\") {\n      logCustomAIDebug(\"Starting redirect-based CustomAI authentication\");\n      res = await this.loginRedirectThenAwait(req);\n    } else {\n      logCustomAIDebug(\"Starting popup-based CustomAI authentication\");\n      res = await this.msal.loginPopup(req);\n    }\n    this.account = res.account ?? null;\n    logCustomAIDebug(\"Interactive CustomAI authentication completed\", {\n      username: this.account?.username,\n      hasAccount: !!this.account,\n    });\n    return res;\n  }\n\n  async getAccessToken(scopes?: string[]): Promise<string> {\n    logCustomAIDebug(\"Requesting CustomAI access token\", {\n      scopes: scopes ?? this.defaultScopes,\n    });\n    const res = await this.authenticate(scopes);\n    logCustomAIDebug(\"Access token retrieved for CustomAI\", {\n      hasToken: !!res.accessToken,\n      expiresOn: res.expiresOn?.toISOString(),\n    });\n    return res.accessToken;\n  }\n\n  async logout(): Promise<void> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    logCustomAIDebug(\"Logging out of CustomAI\");\n    if (this.interactionType === \"redirect\") {\n      await this.msal.logoutRedirect();\n    } else {\n      await this.msal.logoutPopup();\n    }\n    this.account = null;\n    logCustomAIDebug(\"CustomAI logout completed\");\n  }\n\n  private async loginRedirectThenAwait(req: RedirectRequest, isAcquire = false) {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    if (isAcquire) {\n      logCustomAIDebug(\"Acquiring token via redirect flow\");\n      await this.msal.acquireTokenRedirect(req);\n    } else {\n      logCustomAIDebug(\"Initiating login redirect flow\");\n      await this.msal.loginRedirect(req);\n    }\n    const res = await this.msal.handleRedirectPromise();\n    if (!res) {\n      throw new Error(\"Redirect initiated. Call hydrateFromRedirect() on startup.\");\n    }\n    logCustomAIDebug(\"Redirect flow returned authentication result\", {\n      username: res.account?.username,\n    });\n    return res;\n  }\n}\n"]}