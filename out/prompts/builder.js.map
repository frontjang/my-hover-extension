{"version":3,"file":"builder.js","sourceRoot":"","sources":["../../src/prompts/builder.ts"],"names":[],"mappings":";;AAcA,gDAkCC;AAxCD,SAAS,aAAa,CAAC,QAAgB,EAAE,IAAY,EAAE,IAAY;IACjE,OAAO,QAAQ;SACZ,OAAO,CAAC,sBAAsB,EAAE,IAAI,CAAC;SACrC,OAAO,CAAC,sBAAsB,EAAE,IAAI,CAAC,CAAC;AAC3C,CAAC;AAEM,KAAK,UAAU,kBAAkB,CACtC,IAAY,EACZ,QAA4B,EAC5B,MAAsB,EACtB,QAA+B;IAE/B,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;IAChC,MAAM,WAAW,GAAG,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;IAC5C,MAAM,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,SAAS,CAAC;IAE7D,MAAM,YAAY,GAAG,MAAM,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC;IACtD,MAAM,eAAe,GAAG,YAAY;QAClC,CAAC,CAAC,aAAa,CAAC,YAAY,EAAE,WAAW,EAAE,WAAW,CAAC;QACvD,CAAC,CAAC,qBAAqB,WAAW,sBAAsB,CAAC;IAE3D,MAAM,WAAW,GAAa,CAAC,eAAe,CAAC,CAAC;IAEhD,IAAI,WAAW,IAAI,MAAM,CAAC,qBAAqB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAC3D,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,OAAO,CACrC,EAAE,QAAQ,EAAE,QAAQ,IAAI,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,EAC/C,MAAM,CAAC,qBAAqB,CAC7B,CAAC;QAEF,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACxB,WAAW,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAC;QAChC,CAAC;IACH,CAAC;IAED,MAAM,MAAM,GAAG,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAExC,OAAO;QACL,YAAY;QACZ,UAAU,EAAE,MAAM;KACnB,CAAC;AACJ,CAAC","sourcesContent":["import { ProviderConfig } from '../ai/types';\nimport { LineProcessorRegistry } from './registry';\n\nexport interface PromptPayload {\n  systemPrompt?: string;\n  userPrompt: string;\n}\n\nfunction applyTemplate(template: string, word: string, line: string): string {\n  return template\n    .replace(/\\{\\{\\s*word\\s*\\}\\}/gi, word)\n    .replace(/\\{\\{\\s*line\\s*\\}\\}/gi, line);\n}\n\nexport async function buildPromptPayload(\n  word: string,\n  lineText: string | undefined,\n  config: ProviderConfig,\n  registry: LineProcessorRegistry\n): Promise<PromptPayload> {\n  const trimmedWord = word.trim();\n  const trimmedLine = (lineText ?? '').trim();\n  const systemPrompt = config.systemPrompt.trim() || undefined;\n\n  const baseTemplate = config.basePromptTemplate.trim();\n  const baseInstruction = baseTemplate\n    ? applyTemplate(baseTemplate, trimmedWord, trimmedLine)\n    : `Explain the word \"${trimmedWord}\" in plain language.`;\n\n  const promptLines: string[] = [baseInstruction];\n\n  if (trimmedLine && config.lineContextAugmenters.length > 0) {\n    const contexts = await registry.collect(\n      { lineText: lineText ?? '', word: trimmedWord },\n      config.lineContextAugmenters\n    );\n\n    if (contexts.length > 0) {\n      promptLines.push(...contexts);\n    }\n  }\n\n  const prompt = promptLines.join('\\n\\n');\n\n  return {\n    systemPrompt,\n    userPrompt: prompt\n  };\n}\n"]}