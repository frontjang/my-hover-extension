{"version":3,"file":"extension.js","sourceRoot":"","sources":["../src/extension.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport * as vscode from 'vscode';\nimport {\n  FileContextResolver,\n  LineProcessorRegistry,\n  createDefaultLineProcessorRegistry,\n  parseFileLineReference,\n  FILE_LINE_PATTERN\n} from './prompts';\nimport {\n  ProviderConfig,\n  ProviderSelection,\n  PROVIDER_LABELS,\n  getProviderConfig\n} from './ai/types';\nimport {\n  ProviderExplanationResult,\n  resolveGeminiExplanation,\n  resolveOpenAIStyleExplanation\n} from './ai/explanations';\nimport { getLastPromptSession } from './promptSessions';\n\nfunction shouldWarnForProvider(config: ProviderConfig): boolean {\n  if (config.provider === 'gemini') {\n    return !config.geminiApiKey;\n  }\n\n  if (config.provider === 'openai') {\n    return !config.openAiApiKey;\n  }\n\n  if (config.provider === 'custom') {\n    return !config.customApiKey;\n  }\n\n  return false;\n}\n\nasync function promptForConfiguration(): Promise<void> {\n  const selection = await vscode.window.showInformationMessage(\n    'My Hover Extension requires an API key for the selected provider.',\n    'Open Settings'\n  );\n\n  if (selection === 'Open Settings') {\n    await vscode.commands.executeCommand('workbench.action.openSettings', 'myHoverExtension');\n  }\n}\n\nfunction createCommandLinksMarkdown(): string {\n  const links = [\n    '[⚙️ Configure extension](command:myHoverExtension.openSettings)',\n    '[📝 View last prompt](command:myHoverExtension.showLastPromptDetails)'\n  ];\n\n  return links.join(' • ');\n}\n\nfunction formatMissingConfigurationMessage(\n  providerLabel: string,\n  missingParts: string[]\n): string {\n  if (missingParts.length === 0) {\n    return `${providerLabel} configuration is incomplete. Use the settings button below to update the extension.`;\n  }\n\n  const formattedParts =\n    missingParts.length === 1\n      ? missingParts[0]\n      : `${missingParts.slice(0, -1).join(', ')} and ${missingParts[missingParts.length - 1]}`;\n\n  return `${providerLabel} configuration is missing the ${formattedParts}. Use the settings button below to update the extension.`;\n}\n\ninterface PromptDependencies {\n  resolver: FileContextResolver;\n  registry: LineProcessorRegistry;\n}\n\nfunction resolveReferenceRoots(config: ProviderConfig): string[] {\n  const workspaceFolders = vscode.workspace.workspaceFolders ?? [];\n  const roots = new Set<string>();\n\n  const addRoot = (candidate: string) => {\n    if (!candidate) {\n      return;\n    }\n\n    const normalized = path.resolve(candidate);\n    if (!roots.has(normalized)) {\n      roots.add(normalized);\n    }\n  };\n\n  for (const folder of workspaceFolders) {\n    addRoot(folder.uri.fsPath);\n  }\n\n  for (const root of config.referenceSearchRoots) {\n    if (path.isAbsolute(root)) {\n      addRoot(root);\n    } else {\n      for (const folder of workspaceFolders) {\n        addRoot(path.join(folder.uri.fsPath, root));\n      }\n    }\n  }\n\n  return Array.from(roots);\n}\n\nfunction createPromptDependencies(config: ProviderConfig): PromptDependencies {\n  const roots = resolveReferenceRoots(config);\n\n  console.log(\n    `[MyHoverExtension] Using reference search roots: ${\n      roots.length > 0 ? roots.join(', ') : '<none>'\n    }`\n  );\n\n  const resolver = new FileContextResolver({ roots });\n  const registry = createDefaultLineProcessorRegistry(resolver);\n\n  return { resolver, registry };\n}\n\nasync function resolveDefinitionReference(\n  lineText: string,\n  resolver: FileContextResolver\n): Promise<vscode.Location | undefined> {\n  const match = FILE_LINE_PATTERN.exec(lineText);\n\n  if (!match) {\n    console.log('[MyHoverExtension] No file_line reference detected on the current line.');\n    return undefined;\n  }\n\n  const parsed = parseFileLineReference(match[1]);\n\n  if (!parsed) {\n    console.log('[MyHoverExtension] file_line reference found but could not be parsed.');\n    return undefined;\n  }\n\n  console.log(\n    `[MyHoverExtension] Resolving definition reference ${parsed.filePath}:${parsed.line}.`\n  );\n\n  const context = await resolver.resolve(parsed.filePath, parsed.line);\n\n  if (!context) {\n    console.log('[MyHoverExtension] Definition reference could not be resolved to a file.');\n    return undefined;\n  }\n\n  const uri = vscode.Uri.file(context.absolutePath);\n  const position = new vscode.Position(Math.max(0, parsed.line - 1), 0);\n\n  return new vscode.Location(uri, position);\n}\n\nexport function activate(context: vscode.ExtensionContext) {\n  const configuration = vscode.workspace.getConfiguration('myHoverExtension');\n  const providerConfig = getProviderConfig(configuration);\n\n  if (shouldWarnForProvider(providerConfig)) {\n    void promptForConfiguration();\n  }\n\n  if (!configuration.get<boolean>('enable')) {\n    return;\n  }\n\n  const openSettingsCommand = vscode.commands.registerCommand(\n    'myHoverExtension.openSettings',\n    async () => {\n      await vscode.commands.executeCommand('workbench.action.openSettings', 'myHoverExtension');\n    }\n  );\n\n  const showLastPromptCommand = vscode.commands.registerCommand(\n    'myHoverExtension.showLastPromptDetails',\n    async () => {\n      const session = getLastPromptSession();\n\n      if (!session) {\n        void vscode.window.showInformationMessage(\n          'No prompt history available yet. Hover over code to generate an explanation first.'\n        );\n        return;\n      }\n\n      const providerLabel = PROVIDER_LABELS[session.provider];\n      const timestamp = new Date(session.timestamp).toLocaleString();\n      const lines: string[] = [\n        '# My Hover Extension prompt details',\n        '',\n        `- **Provider:** ${providerLabel}`,\n        `- **Endpoint:** ${session.endpoint || 'Not configured'}`,\n        `- **Model:** ${session.model || 'Not configured'}`,\n        `- **Hovered word:** ${session.hoveredWord}`,\n        `- **Timestamp:** ${timestamp}`,\n        ''\n      ];\n\n      if (session.lineText) {\n        lines.push('## Source line', '```', session.lineText, '```', '');\n      }\n\n      lines.push('## System prompt');\n\n      if (session.systemPrompt) {\n        lines.push('```', session.systemPrompt, '```');\n      } else {\n        lines.push('_Not sent_');\n      }\n\n      lines.push('', '## User prompt', '```', session.userPrompt, '```', '');\n\n      lines.push('## Rendered request payload', '```json', session.requestPayload, '```', '');\n\n      lines.push('## Provider response');\n\n      if (session.responseText) {\n        lines.push('```', session.responseText, '```');\n      }\n\n      if (session.responseError) {\n        if (session.responseText) {\n          lines.push('');\n        }\n        lines.push('### Error details', '```', session.responseError, '```');\n      }\n\n      if (!session.responseText && !session.responseError) {\n        lines.push('_No response received._');\n      }\n\n      const document = await vscode.workspace.openTextDocument({\n        content: lines.join('\\n'),\n        language: 'markdown'\n      });\n\n      await vscode.window.showTextDocument(document, { preview: true });\n    }\n  );\n\n  let resolvingBuiltInHover = false;\n  let resolvingBuiltInDefinition = false;\n\n  const hoverProvider = vscode.languages.registerHoverProvider(\n    { scheme: 'file', language: '*' },\n    {\n      async provideHover(document, position, token) {\n        console.log(\n          `[MyHoverExtension] Hover requested for ${document.uri.toString()} at ${position.line + 1}:${position.character + 1}`\n        );\n\n        if (resolvingBuiltInHover) {\n          console.log('[MyHoverExtension] Skipping hover to avoid re-entrancy.');\n          return undefined;\n        }\n\n        resolvingBuiltInHover = true;\n\n        let builtInHovers: vscode.Hover[] | undefined;\n\n        try {\n          console.log('[MyHoverExtension] Resolving built-in hover results...');\n          builtInHovers = await vscode.commands.executeCommand<vscode.Hover[]>(\n            'vscode.executeHoverProvider',\n            document.uri,\n            position\n          );\n          console.log(\n            `[MyHoverExtension] Built-in hover count: ${builtInHovers?.length ?? 0}`\n          );\n        } finally {\n          resolvingBuiltInHover = false;\n        }\n\n        const wordRange = document.getWordRangeAtPosition(position);\n        const hoveredWord = wordRange ? document.getText(wordRange) : undefined;\n        const lineText = document.lineAt(position.line).text;\n        let providerExplanation: ProviderExplanationResult | undefined;\n\n        const refreshedConfig = getProviderConfig(\n          vscode.workspace.getConfiguration('myHoverExtension')\n        );\n        const providerLabel = PROVIDER_LABELS[refreshedConfig.provider];\n        const { registry } = createPromptDependencies(refreshedConfig);\n\n        if (hoveredWord && !token.isCancellationRequested) {\n          try {\n            if (refreshedConfig.provider === 'gemini') {\n              const missing: string[] = [];\n\n              if (!refreshedConfig.geminiEndpoint) {\n                missing.push('endpoint');\n              }\n\n              if (!refreshedConfig.geminiApiKey) {\n                missing.push('API key');\n              }\n\n              if (!refreshedConfig.geminiModel) {\n                missing.push('model');\n              }\n\n              if (missing.length === 0) {\n                console.log('[MyHoverExtension] Requesting Gemini explanation...');\n                const statusDisposable = vscode.window.setStatusBarMessage(\n                  'My Hover Extension: Loading explanation…'\n                );\n                try {\n                  providerExplanation = await resolveGeminiExplanation(\n                    hoveredWord,\n                    lineText,\n                    refreshedConfig,\n                    registry,\n                    token\n                  );\n                } finally {\n                  statusDisposable.dispose();\n                }\n\n                const logStatus = providerExplanation?.text ? 'received' : 'not available';\n                console.log(`[MyHoverExtension] Gemini explanation ${logStatus}.`);\n\n                if (providerExplanation?.error) {\n                  console.log(\n                    `[MyHoverExtension] Gemini explanation error: ${providerExplanation.error}`\n                  );\n                }\n              } else {\n                console.log(\n                  '[MyHoverExtension] Gemini configuration incomplete, skipping request.'\n                );\n                providerExplanation = {\n                  error: formatMissingConfigurationMessage(providerLabel, missing)\n                };\n              }\n            } else if (refreshedConfig.provider === 'openai') {\n              const missing: string[] = [];\n\n              if (!refreshedConfig.openAiEndpoint) {\n                missing.push('endpoint');\n              }\n\n              if (!refreshedConfig.openAiApiKey) {\n                missing.push('API key');\n              }\n\n              if (!refreshedConfig.openAiModel) {\n                missing.push('model');\n              }\n\n              if (missing.length === 0) {\n                console.log('[MyHoverExtension] Requesting OpenAI explanation...');\n                const statusDisposable = vscode.window.setStatusBarMessage(\n                  'My Hover Extension: Loading explanation…'\n                );\n                try {\n                  providerExplanation = await resolveOpenAIStyleExplanation(\n                    hoveredWord,\n                    lineText,\n                    refreshedConfig,\n                    registry,\n                    refreshedConfig.openAiEndpoint,\n                    refreshedConfig.openAiApiKey,\n                    refreshedConfig.openAiModel,\n                    'openai',\n                    token\n                  );\n                } finally {\n                  statusDisposable.dispose();\n                }\n\n                const logStatus = providerExplanation?.text ? 'received' : 'not available';\n                console.log(`[MyHoverExtension] OpenAI explanation ${logStatus}.`);\n\n                if (providerExplanation?.error) {\n                  console.log(\n                    `[MyHoverExtension] OpenAI explanation error: ${providerExplanation.error}`\n                  );\n                }\n              } else {\n                console.log(\n                  '[MyHoverExtension] OpenAI configuration incomplete, skipping request.'\n                );\n                providerExplanation = {\n                  error: formatMissingConfigurationMessage(providerLabel, missing)\n                };\n              }\n            } else if (refreshedConfig.provider === 'custom') {\n              const missing: string[] = [];\n              const chosenModel = refreshedConfig.customModel || refreshedConfig.openAiModel;\n\n              if (!refreshedConfig.customEndpoint) {\n                missing.push('endpoint');\n              }\n\n              if (!refreshedConfig.customApiKey) {\n                missing.push('API key');\n              }\n\n              if (!chosenModel) {\n                missing.push('model');\n              }\n\n              if (missing.length === 0) {\n                console.log('[MyHoverExtension] Requesting custom explanation...');\n                const statusDisposable = vscode.window.setStatusBarMessage(\n                  'My Hover Extension: Loading explanation…'\n                );\n                try {\n                  providerExplanation = await resolveOpenAIStyleExplanation(\n                    hoveredWord,\n                    lineText,\n                    refreshedConfig,\n                    registry,\n                    refreshedConfig.customEndpoint,\n                    refreshedConfig.customApiKey,\n                    chosenModel,\n                    'custom',\n                    token\n                  );\n                } finally {\n                  statusDisposable.dispose();\n                }\n\n                const logStatus = providerExplanation?.text ? 'received' : 'not available';\n                console.log(`[MyHoverExtension] Custom explanation ${logStatus}.`);\n\n                if (providerExplanation?.error) {\n                  console.log(\n                    `[MyHoverExtension] Custom explanation error: ${providerExplanation.error}`\n                  );\n                }\n              } else {\n                console.log(\n                  '[MyHoverExtension] Custom provider configuration incomplete, skipping request.'\n                );\n                providerExplanation = {\n                  error: formatMissingConfigurationMessage(providerLabel, missing)\n                };\n              }\n            }\n          } catch (error) {\n            console.error('[MyHoverExtension] Provider request failed:', error);\n            const message = error instanceof Error ? error.message : String(error);\n            providerExplanation = {\n              error: `Unexpected error while requesting ${providerLabel} explanation: ${message}`\n            };\n          }\n        }\n\n        const commandLinks = createCommandLinksMarkdown();\n        const extensionContents: vscode.MarkdownString[] = [];\n\n        if (providerExplanation?.text) {\n          extensionContents.push(new vscode.MarkdownString(providerExplanation.text));\n        } else if (providerExplanation?.error) {\n          extensionContents.push(\n            new vscode.MarkdownString(`_${providerExplanation.error}_`)\n          );\n        }\n\n        const actionsMarkdown = new vscode.MarkdownString(commandLinks);\n        actionsMarkdown.isTrusted = true;\n\n        const noBuiltInHover = !builtInHovers || builtInHovers.length === 0;\n        const shouldShowActions =\n          Boolean(providerExplanation) || noBuiltInHover || Boolean(hoveredWord);\n\n        if (shouldShowActions) {\n          extensionContents.push(actionsMarkdown);\n        }\n\n        if (!noBuiltInHover && builtInHovers) {\n          const hover = new vscode.Hover([...builtInHovers[0].contents]);\n\n          for (const content of extensionContents) {\n            hover.contents.push(content);\n          }\n\n          return hover;\n        }\n\n        console.log('[MyHoverExtension] No built-in hover found, using extension response.');\n\n        if (!providerExplanation?.text && !providerExplanation?.error) {\n          extensionContents.unshift(\n            new vscode.MarkdownString('_My Hover Extension did not return a response._')\n          );\n        }\n\n        return new vscode.Hover(extensionContents);\n      }\n    }\n  );\n\n  const defProvider = vscode.languages.registerDefinitionProvider(\n    { scheme: 'file', language: '*' },\n    {\n      async provideDefinition(document, position) {\n        if (resolvingBuiltInDefinition) {\n          return undefined;\n        }\n\n        resolvingBuiltInDefinition = true;\n\n        let builtInDefs: vscode.Location[] | undefined;\n\n        try {\n          console.log('[MyHoverExtension] Resolving built-in definitions...');\n          builtInDefs = await vscode.commands.executeCommand<vscode.Location[]>(\n            'vscode.executeDefinitionProvider',\n            document.uri,\n            position\n          );\n          console.log(\n            `[MyHoverExtension] Built-in definition count: ${builtInDefs?.length ?? 0}`\n          );\n        } finally {\n          resolvingBuiltInDefinition = false;\n        }\n\n        const results: vscode.Location[] = [];\n\n        if (builtInDefs && builtInDefs.length > 0) {\n          results.push(...builtInDefs);\n        }\n\n        const refreshedConfig = getProviderConfig(\n          vscode.workspace.getConfiguration('myHoverExtension')\n        );\n        const { resolver } = createPromptDependencies(refreshedConfig);\n        const lineText = document.lineAt(position.line).text;\n        const referenceLocation = await resolveDefinitionReference(lineText, resolver);\n\n        if (referenceLocation) {\n          console.log('[MyHoverExtension] Adding reference-based definition result.');\n          results.push(referenceLocation);\n        } else {\n          console.log('[MyHoverExtension] No reference-based definition result available.');\n        }\n\n        return results;\n      }\n    }\n  );\n\n  context.subscriptions.push(hoverProvider, defProvider, openSettingsCommand, showLastPromptCommand);\n}\n\nexport function deactivate() {}\n"]}